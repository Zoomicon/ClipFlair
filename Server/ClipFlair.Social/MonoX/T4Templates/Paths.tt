<#
/*
AspPathGuru Version 1.0.00

Written by David Ebbo
david.ebbo@microsoft.com
http://twitter.com/davidebbo
http://blogs.msdn.com/davidebb

Related blog posts:
http://blogs.msdn.com/davidebb/archive/2009/07/12/asppathguru-a-little-t4-love-for-asp-net-webforms.aspx

Feel free to use and modify to fit your needs.

This T4 template for ASP.NET WebForms apps creates some strongly typed constants that help eliminate
the use of literal strings to refer to pages and user controls

To use it, simply copy it to the root of your application.

You will then be able to replace:
    Control uc = LoadControl("~/UserControls/MyUserControl.ascx");
By:
    Control uc = LoadControl(Paths.UserControls.MyUserControl_ascx);

This will give you intellisense and compile time checking that you are pointing where you meant to.

KNOWN ISSUES:
- This template works in Web Application but not Web Sites, since Web Sites don't support T4 processing

HISTORY:

1.0.00 (07-11-2009): the original version
*/
#>
<#@ template language="C#v3.5" debug="true" hostspecific="true" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System;
using System.Web;
using System.Web.UI;

<#
Render();
#>
}
<#
PopIndent();
#>
}
<#+
static string RootFolder;
static string defaultNamespace = "MonoSoftware.MonoX";
static string defaultTheme = "Default";

void Render() {
    RootFolder = new DirectoryInfo(Path.GetDirectoryName(Host.TemplateFile)).Parent.Parent.FullName;
#>
namespace <#= defaultNamespace #>
{
<#+
PushIndent("    ");
#>
/// <summary>
/// Gets the strongly typed reference to files and folders.
/// </summary>
public static class Paths 
{
<#+
	PushIndent("    ");
    ProcessFolderRecursive(new DirectoryInfo(RootFolder), true /*root*/, false);
    PopIndent();
}

void ProcessFolderRecursive(DirectoryInfo dir, bool root, bool isInTemplateFolder) {
    
    string dirName = Sanitize(dir.FullName);
    string dirVirtualPath = GetVirtualPath(dir.FullName);
    foreach (var file in dir.GetFiles()) {
        if (!IgnoreFile(file)) 
        {
            string constantName = Sanitize(file.Name);
            string virtualPath = GetVirtualPath(file.FullName);
		
			if (isInTemplateFolder)
			{
#>
/// <summary>
/// Gets the '<#= constantName #>' virtual path ('<#= virtualPath #>') for active theme.
/// </summary>
public static string <#= constantName #> { get { if (HttpContext.Current != null && HttpContext.Current.CurrentHandler != null) return "<#= virtualPath #>".Replace("/<#= defaultTheme #>/", String.Format("/{0}/", (HttpContext.Current.CurrentHandler as Page).Theme)); else return "<#= virtualPath #>";} }
<#+
			}
			else
			{
#>
/// <summary>
/// Gets the '<#= constantName #>' virtual path ('<#= virtualPath #>').
/// </summary>
public const string <#= constantName #> = "<#= virtualPath #>";
<#+
			}
        }
    }

	if (isInTemplateFolder)
	{
#>
/// <summary>
/// Gets the root folder virtual path ('<#= dirVirtualPath #>') for active theme.
/// </summary>
public static string Root { get { if (HttpContext.Current != null && HttpContext.Current.CurrentHandler != null) return "<#= dirVirtualPath #>".Replace("/<#= defaultTheme #>", String.Format("/{0}", (HttpContext.Current.CurrentHandler as Page).Theme)); else return "<#= dirVirtualPath #>";} }
<#+
	}
	else
	{
#>
/// <summary>
/// Gets the root folder virtual path ('<#= dirVirtualPath #>').
/// </summary>
public const string Root = "<#= dirVirtualPath #>";
<#+
	}
	
    foreach (var subDir in dir.GetDirectories()) {
        if (!IgnoreFolder(subDir)) {
        
			bool isTemplateFolder = IsTemplateFolder(subDir);
			
			if (isInTemplateFolder)
			{
#>
/// <summary>
/// Gets the sub folder virtual path ('<#= GetVirtualPath(subDir.FullName) #>') for active theme.
/// </summary>
<#+
			}
			else
			{
#>
/// <summary>
/// Gets the sub folder virtual path ('<#= GetVirtualPath(subDir.FullName) #>').
/// </summary>
<#+
			}
#>
public static class @<#= Sanitize(subDir.Name) #> {
<#+
            PushIndent("    ");
            ProcessFolderRecursive(isTemplateFolder ? subDir.GetDirectories(defaultTheme)[0] : subDir, false /*root*/, isTemplateFolder ? true : isInTemplateFolder);
            PopIndent();
            
            if (isTemplateFolder)
            {
#>
/// <summary>
/// Gets the sub folder of all theme or template virtual paths for ('<#= GetVirtualPath(subDir.FullName) #>').
/// </summary>
public static class @All {
<#+
				PushIndent("    ");
				ProcessFolderRecursive(subDir, false /*root*/, isInTemplateFolder);
				PopIndent();
#>	
}
<#+
            }
#>	
}
<#+
        }
    }
}

bool IsTemplateFolder(DirectoryInfo dir) {
	switch (dir.Name.ToLowerInvariant()) {
        case "app_templates":
        case "app_themes":
            return dir.FullName.Replace('\\', '/').ToLowerInvariant().Contains(RootFolder.Replace('\\', '/').ToLowerInvariant() + "/" + dir.Name.ToLowerInvariant());
    }
    return false;
}

bool IgnoreFolder(DirectoryInfo dir) {
    // Skip some special folders (mostly as an optimization)
    switch (dir.Name.ToLowerInvariant()) {
        case "bin":
        case "obj":
        case ".svn":
        case "_svn":
        case "properties":
        case "app_data":
        case "app_code":
        case "app_browsers":
        case "app_customlocalization":
        case "app_globalresources":
        case "app_localresources":
        case "cache":        
        case "fulltextindexes":
        case "language":
        case "logs":
        case "rssstorage":
        case "upload":
            return true;
    }

    return false;
}

bool IgnoreFile(FileInfo file) {
    // Only look for a few specific extensions
    switch (file.Extension.ToLowerInvariant()) {
        case ".aspx":
        case ".ascx":
        case ".ashx":
        case ".master":
        case ".js":
        case ".css":
        case ".gif":
        case ".png":
        case ".jpg":
        case ".pdf":
        case ".htm":
        case ".html":
        case ".xml":
        case ".swf":
            return false;
    }

    return true;
}

// Turn a physical path into an app relative virtual path
string GetVirtualPath(string path) {
    return "~" + path.Substring(RootFolder.Length).Replace('\\', '/');
}

static string Sanitize(string fileName) {
    // Replace all invalid chars by underscores
    fileName = Regex.Replace(fileName, @"[\W\b]", "_", RegexOptions.IgnoreCase);

    // If it starts with a digit, prefix it with an underscore
    return Regex.Replace(fileName, @"^\d", @"_$0");
}
#>
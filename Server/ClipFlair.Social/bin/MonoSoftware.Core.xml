<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoSoftware.Core</name>
    </assembly>
    <members>
        <member name="T:MonoSoftware.Core.BigInteger">
            <summary>
            BigInteger Class Version 1.03. Used for RSA public key encryption in shared Web hosting environments
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.BigInteger.primesBelow2000">
            <summary>
            Provides a array of the primes smaller than 2000 to test the generated prime number.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.BigInteger.dataLength">
            <summary>
            Number of actual chars used.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor">
            <summary>
            Constructor (Default value for BigInteger is 0).
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor (Default value provided by long).
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.UInt64)">
             <summary>
            Constructor (Default value provided by ulong).
             </summary>
             <param name="value">Value</param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(MonoSoftware.Core.BigInteger)">
            <summary>
            Constructor (Default value provided by BigInteger). 
            </summary>
            <param name="bi">BigInteger value</param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            Constructor (Default value provided by a string of digits of the specified base)
            </summary>
            <param name="value">value provided by a string of digits of the specified base</param>
            <param name="radix"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.Byte[])">
            <summary>
            Constructor.
            <para>
            The lowest index of the input byte array (i.e [0]) should contain the
            most significant byte of the number, and the highest index should
            contain the least significant byte.
            </para>
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
             Constructor (Default value provided by an array of bytes of the specified length.)
            </summary>
            <param name="inData"></param>
            <param name="inLen"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.#ctor(System.UInt32[])">
            <summary>
            Constructor (Default value provided by an array of unsigned integers)
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Implicit(System.Int64)~MonoSoftware.Core.BigInteger">
            <summary>
            Overloading of the typecast operator.
            For BigInteger bi = 10;
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Implicit(System.UInt64)~MonoSoftware.Core.BigInteger">
            <summary>
            ulong ctor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Implicit(System.Int32)~MonoSoftware.Core.BigInteger">
            <summary>
            int ctor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Implicit(System.UInt32)~MonoSoftware.Core.BigInteger">
            <summary>
            uint ctor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Addition(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of addition operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Increment(MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of the unary ++ operator
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Subtraction(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of subtraction operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Decrement(MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of the unary -- operator
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Multiply(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of multiplication operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MonoSoftware.Core.BigInteger.op_LeftShift(MonoSoftware.Core.BigInteger,System.Int32)" -->
        <member name="M:MonoSoftware.Core.BigInteger.op_RightShift(MonoSoftware.Core.BigInteger,System.Int32)">
            <summary>
            Overloading of unary >> operators
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_OnesComplement(MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of the NOT operator (1's complement)
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_UnaryNegation(MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of the NEGATE operator (2's complement)
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Equality(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of equality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Inequality(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of inequality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.GetHashCode">
            <summary>
            GetsHashCode implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_GreaterThan(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of inequality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_LessThan(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of inequality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_GreaterThanOrEqual(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of inequality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_LessThanOrEqual(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of inequality operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Division(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of division operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_Modulus(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of modulus operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_BitwiseAnd(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of bitwise AND operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_BitwiseOr(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of bitwise OR operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.op_ExclusiveOr(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Overloading of bitwise XOR operator
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.max(MonoSoftware.Core.BigInteger)">
            <summary>
            Max implementation
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.min(MonoSoftware.Core.BigInteger)">
            <summary>
            Min implementation
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.abs">
            <summary>
            Returns the absolute value
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.ToString">
            <summary>
            Returns a string representing the BigInteger in base 10.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.ToString(System.Int32)">
            <summary>
            Returns a string representing the BigInteger in sign-and-magnitude format in the specified radix.
            </summary>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.ToHexString">
            <summary>
            Returns a hex string showing the contains of the BigInteger
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.modPow(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Modulo Exponentiation
            </summary>
            <param name="exp"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.BarrettReduction(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Fast calculation of modular reduction using Barrett's reduction.
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <param name="constant"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.gcd(MonoSoftware.Core.BigInteger)">
            <summary>
            Gcd functionality
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.genRandomBits(System.Int32,System.Random)">
            <summary>
            Populates "this" with the specified amount of random bits
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.bitCount">
            <summary>
            Returns the position of the most significant bit in the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.FermatLittleTest(System.Int32)">
            <summary>
            Probabilistic prime test based on Fermat's little theorem
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.RabinMillerTest(System.Int32)">
            <summary>
            Probabilistic prime test based on Rabin-Miller's
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.SolovayStrassenTest(System.Int32)">
            <summary>
            Probabilistic prime test based on Solovay-Strassen (Euler Criterion)
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.LucasStrongTest">
            <summary>
            Implementation of the Lucas Strong Pseudo Prime test.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MonoSoftware.Core.BigInteger.isProbablePrime(System.Int32)" -->
        <member name="M:MonoSoftware.Core.BigInteger.isProbablePrime">
            <summary>
            Determines whether this BigInteger is probably prime using a
            combination of base 2 strong pseudoprime test and Lucas strong
            pseudoprime test.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.IntValue">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.LongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as an long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.Jacobi(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Computes the Jacobi Symbol for a and b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.genPseudoPrime(System.Int32,System.Int32,System.Random)">
            <summary>
            Generates a positive BigInteger that is probably prime.
            </summary>
            <param name="bits"></param>
            <param name="confidence"></param>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.genCoPrime(System.Int32,System.Random)">
            <summary>
            Generates a random number with the specified number of bits such that gcd(number, this) = 1
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.modInverse(MonoSoftware.Core.BigInteger)">
            <summary>
            Returns the modulo inverse of this.  Throws ArithmeticException if
            the inverse does not exist.  (i.e. gcd(this, modulus) != 1)
            </summary>
            <param name="modulus"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.getBytes">
            <summary>
            Returns the value of the BigInteger as a byte array.  The lowest
            index contains the MSB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.setBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 1. The Least Significant Bit position is 0.
            </summary>
            <param name="bitNum"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.unsetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 0. The Least Significant Bit position is 0.
            </summary>
            <param name="bitNum"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.sqrt">
            <summary>
            Returns a value that is equivalent to the integer square root
            of the BigInteger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.LucasSequence(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger)">
            <summary>
            Returns the k_th number in the Lucas Sequence reduced modulo n.
            </summary>
            <param name="P"></param>
            <param name="Q"></param>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.LucasSequenceHelper(MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,MonoSoftware.Core.BigInteger,System.Int32)">
            <summary>
            Performs the calculation of the kth term in the Lucas Sequence.
            </summary>
            <param name="P"></param>
            <param name="Q"></param>
            <param name="k"></param>
            <param name="n"></param>
            <param name="constant"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.MulDivTest(System.Int32)">
            <summary>
            Tests the correct implementation of the /, %, * and + operators
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.RSATest(System.Int32)">
            <summary>
            Tests the correct implementation of the modulo exponential function using RSA encryption and decryption (using pre-computed encryption and decryption keys).
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.RSATest2(System.Int32)">
            <summary>
            Tests the correct implementation of the modulo exponential and
            inverse modulo functions using RSA encryption and decryption.  The two
            pseudoprimes p and q are fixed, but the two RSA keys are generated
            for each round of testing.
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.SqrtTest(System.Int32)">
            <summary>
            Tests the correct implementation of sqrt() method.
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:MonoSoftware.Core.BigInteger.Main(System.String[])">
            <summary>
            Entry point
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MonoSoftware.Core.Mail.IMailSenderLogger">
            <summary>
            Mail sender logger.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSenderLogger.LogMessage(System.Int32,System.String,System.Object)">
            <summary>
            Logs the message to underlying logger.
            </summary>
            <param name="eventId">Status Id.</param>
            <param name="label">Message label.</param>
            <param name="logObject">Log object.</param>
            <returns>True if message was logged, false otherwise.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSenderLogger.Initialize(System.String)">
            <summary>
            Initialize mail sender logger.
            </summary>
            <param name="logName">Log name.</param>
            <returns>True if initialized, false otherwise.</returns>
        </member>
        <member name="P:MonoSoftware.Core.Mail.IMailSenderLogger.LogName">
            <summary>
            Gets or sets a log name.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.IMailSenderLogger.EventID">
            <summary>
            Gets or sets a event id.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.IMailSenderLogger.Label">
            <summary>
            Gets or sets a log message label.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.IMailSenderLogger.LogObject">
            <summary>
            Gets or sets the log object.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.IMSMQMailSender">
            <summary>
            Send a single message or processes a mail queue asynchronously via MSMQ.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.IMailSender">
            <summary>
            Send a single message or processes a mail queue synchronously.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.CreateMailMessage(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Build mail message object.
            </summary>
            <param name="mailTo">Recipient mail.</param>
            <param name="mailFrom">Sender mail.</param>
            <param name="subject">Subject.</param>
            <param name="message">Message.</param>
            <param name="bccArray">BCC.</param>
            <returns>Mail message.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.IsMessageValid(System.Net.Mail.MailMessage)">
            <summary>
            Checks if the mail message has valid headers.
            </summary>
            <param name="mailMsg">Mail message.</param>
            <returns>True if both from and to filds are present, false otherwise.</returns>       
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail">
            <summary>
            Processes a mail queue synchronously, sending mail messages on by one.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail(System.Net.Mail.MailAddress,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="fromAddress">From e-mail address.</param>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
            <param name="htmlContent">Message html content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail(System.Net.Mail.MailAddress,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="fromAddress">From e-mail address.</param>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends a single mail message.
            </summary>
            <param name="mailMsg">Mail message to send.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
            <param name="htmlContent">Message html content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.IMailSender.SendMail(System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
        </member>
        <member name="E:MonoSoftware.Core.Mail.IMailSender.MailMessageSent">
            <summary>
            Triggered when mail messages is sent.
            </summary>
        </member>
        <member name="E:MonoSoftware.Core.Mail.IMailSender.MailSent">
            <summary>
            Triggered when all mail messages are sent.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.IMSMQMailSender.QueueName">
            <summary>
            Queue name to use.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.MSMQMailSender">
            <summary>
            MS Message Queue Mail Sender.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.MailSender">
            <summary>
            Send a single message or processes a mail queue synchronously.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Mail.MailSender.padLock">
            <summary>
            Object used for thread synchronization.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.GetInstance">
            <summary>
            Get Mail sender instance.
            </summary>
            <returns>Mail sender</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.#ctor(System.Collections.Generic.Queue{System.Net.Mail.MailMessage})">
            <summary>
            Constructor
            </summary>
            <param name="messages">Mail message queue</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.CreateMailMessage(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Build mail message object.
            </summary>
            <param name="mailTo">Recipient mail.</param>
            <param name="mailFrom">Sender mail.</param>
            <param name="subject">Subject.</param>
            <param name="message">Message.</param>
            <param name="bccArray">BCC.</param>
            <returns>Mail message.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail(System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="toAddress">To e-mail address</param>
            <param name="title">Message title</param>
            <param name="plainContent">Message plain content</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail(System.Net.Mail.MailAddress,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="fromAddress">From e-mail address.</param>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
            <param name="htmlContent">Message html content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail(System.Net.Mail.MailAddress,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an e-mail message.
            </summary>
            <param name="fromAddress">From e-mail address.</param>
            <param name="toAddress">To e-mail address.</param>
            <param name="title">Message title.</param>
            <param name="plainContent">Message plain content.</param>
            <param name="htmlContent">Message html content.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends a single mail message.
            </summary>
            <param name="mailMsg">Mail message to send.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.SendMail">
            <summary>
            Processes a mail queue synchronously, sending mail messages on by one.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.OnMailSent">
            <summary>
            Raises mail sent event.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.IsMessageValid(System.Net.Mail.MailMessage)">
            <summary>
            Checks if the mail message has valid headers.
            </summary>
            <param name="mailMsg">Mail message.</param>
            <returns>True if both from and to filds are present, false otherwise.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.OnMailMessageSent(System.Net.Mail.MailMessage)">
            <summary>
            Raises mail message sent event.
            </summary>
            <param name="message">Mail message that was sent</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailSender.ProcessQueueItem">
            <summary>
            Process queue item used to process one mail message in a async scenario. Used whith a thread pool.
            </summary>
        </member>
        <member name="E:MonoSoftware.Core.Mail.MailSender.MailSent">
            <summary>
            Triggered when all mail messages are sent.
            </summary>
        </member>
        <member name="E:MonoSoftware.Core.Mail.MailSender.MailMessageSent">
            <summary>
            Triggered when mail messages is sent.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.MailQueue">
            <summary>
            Queue of mail messages to be sent
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.RaiseErrorsOnSend">
            <summary>
            Gets or sets a flag if errors are raised on mail send.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.EnableSSL">
            <summary>
            Gets or sets a flag if SSL is enabled.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.Credentials">
            <summary>
            Gets or sets the SMTP credentials.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.DeliveryMethod">
            <summary>
            SMTP delivery method; if empty, uses setting from web.config.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.Host">
            <summary>
            SMTP host; if empty, uses setting from web.config.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.Port">
            <summary>
            SMTP port; if empty, uses setting from web.config.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.MailFromAddress">
            <summary>
            Gets or sets a mail from address.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.MailFromName">
            <summary>
            Gets or sets a mail from name.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailSender.EmailSendingFailedMessage">
            <summary>
            Gets or sets a message for e-mail sending failed.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MSMQMailSender.GetInstance(System.String)">
            <summary>
            Get Mail sender instance.
            </summary>
            <param name="queueName">Queue name.</param>
            <returns>Mail sender</returns>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MSMQMailSender.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queueName">Queue name.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MSMQMailSender.#ctor(System.String,System.Collections.Generic.Queue{System.Net.Mail.MailMessage})">
            <summary>
            Constructor
            </summary>
            <param name="queueName">Queue name.</param>
            <param name="messages">Mail message queue</param>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MSMQMailSender.QueueName">
            <summary>
            Queue name to use.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.BinarySerializationConverter">
            <summary>
            Binary serialization type converter.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
                the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
                context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
                context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:MonoSoftware.Core.BinarySerializer">
            <summary>
            Used for serialization/deserialization of an object.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serialize the object.
            </summary>
            <param name="o">Object to serialize</param>
            <returns>Serialized object</returns>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializer.Deserialize(System.Byte[])">
            <summary>
            Deserialize the object.
            </summary>
            <param name="buffer">Serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:MonoSoftware.Core.BinarySerializer.DeepCopy(System.Object)">
            <summary>
            Performs the "Deep copy" of an object via serialization and deserialization.
            </summary>
            <param name="o">Object to copy</param>
            <returns>Copy of the object</returns>
        </member>
        <member name="T:MonoSoftware.Core.Collections.ComparisonComparer`1">
            <summary>
            Utility to build an IComparer implementation from a Comparison delegate,
            and a static method to do the reverse.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ComparisonComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new instance which will proxy to the given Comparison
            delegate when called.
            </summary>
            <param name="comparison">Comparison delegate to proxy to. Must not be null.</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ComparisonComparer`1.Compare(`0,`0)">
            <summary>
            Implementation of IComparer.Compare which simply proxies
            to the originally specified Comparison delegate.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ComparisonComparer`1.CreateComparison(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a Comparison delegate from the given Comparer.
            </summary>
            <param name="comparer">Comparer to use when the returned delegate is called. Must not be null.</param>
            <returns>A Comparison delegate which proxies to the given Comparer.</returns>
        </member>
        <member name="T:MonoSoftware.Core.Collections.MruCache`2">
            <summary>
            Most Recently Used (MRU) cache dictionary.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="watermark">Watermark</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="watermark">Watermark</param>
            <param name="comparer">Generic comparer</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="lowWatermark">Low watermark</param>
            <param name="highWatermark">High watermark</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="lowWatermark">Low watermark</param>
            <param name="highWatermark">High watermark</param>
            <param name="comparer">Generic comparer</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.Add(`0,`1)">
            <summary>
            Adds the item to dictionary.
            </summary>
            <param name="key">Item key</param>
            <param name="value">Item value</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.OnSingleItemRemoved(`1)">
            <summary>
            Called when single item is removed. 
            </summary>
            <param name="item">Removed item</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.Remove(`0)">
            <summary>
            Remove item from dictionary.
            </summary>
            <param name="key">Item key</param>
            <returns>True if removed, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.MruCache`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value by using provided key.
            </summary>
            <param name="key">Item key</param>
            <param name="value">Item value</param>
            <returns>True if value is retrieved, False otherwise</returns>
        </member>
        <member name="T:MonoSoftware.Core.Collections.Pool`1">
            <summary>
            Generic object pool.
            </summary>
            <typeparam name="T">Type of pool</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.Collections.Pool`1.#ctor">
            <summary>
            Constructor.
            <para>
            Default maximum pool site is 100 items.
            </para>
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.Pool`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="maxCount">Maximum pool items</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.Pool`1.Take">
            <summary>
            Takes one item from a pool or returns null if there are no items in the pool.
            </summary>
            <returns>Pool item</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.Pool`1.Return(`0)">
            <summary>
            Add item to the pool.
            </summary>
            <param name="item">Item to add</param>
            <returns>True if added, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.Pool`1.Clear">
            <summary>
            Clear the pool.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.Pool`1.Count">
            <summary>
            Gets the pool count.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Collections.RandomAccessQueue`1">
            <summary>
            Source: Jon Skeet - http://www.yoda.arachsys.com/csharp/miscutil/
            A class with a similar function to System.Collections.Queue,
            but allowing random access to the contents of the queue as well
            as the usual enqueuing at the end and dequeuing at the start.
            This implementation is not synchronized at all - clients should
            provide their own synchronization. A SyncRoot is provided for
            this purpose, although any other common reference may also be used.
            In order to provide an efficient implementation of both random access
            and the removal of items from the start of the queue, a circular
            buffer is used and resized when necessary. The buffer never shrinks
            unless TrimToSize is called.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Collections.RandomAccessQueue`1.DefaultCapacity">
            <summary>
            Default (and minimum) capacity for the buffer containing the elements in the queue.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Collections.RandomAccessQueue`1.buffer">
            <summary>
            The circular buffer containing the items in the queue
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Collections.RandomAccessQueue`1.start">
            <summary>
            The "physical" index of item with logical index 0.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Collections.RandomAccessQueue`1.version">
            <summary>
            Version information for the queue - this is incremented every time
            the contents of the queue is changed, so that enumerators can detect
            the change.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RandomAccessQueue class which is empty
            and has the specified capacity (or the default capacity if that is higher).
            </summary>
            <param name="capacity">The initial capacity of the queue</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.#ctor">
            <summary>
            Initializes a new instance of the RandomAccessQueue class which is empty
            and has the default capacity.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Private constructor used in cloning
            </summary>
            <param name="buffer">The buffer to clone for use in this queue</param>
            <param name="count">The number of "valid" elements in the buffer</param>
            <param name="start">The first valid element in the queue</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Clear">
            <summary>
            Clears the queue without resizing the buffer
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.TrimToSize">
            <summary>
            Resizes the buffer to just fit the current number of items in the queue.
            The buffer size is never set to less than the default capacity, however.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the queue.
            </summary>
            <param name="value">The item to add to the queue. The value can be a null reference.</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an object at the specified index.
            </summary>
            <param name="value">The item to add to the queue. The value can be a null reference.</param>
            <param name="index">The index of the newly added item</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Dequeue">
            <summary>
            Removes an T from the start of the queue, returning it.
            </summary>
            <returns>The item at the head of the queue</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the given index and returns it.
            </summary>
            <param name="index">The index of the item to remove</param>
            <returns>The item which has been removed from the</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the queue to the given array, beginning at
            the specified index in the array.
            </summary>
            <param name="dest">The array to copy the contents of the queue into</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.BinarySearch(`0)">
            <summary>
            Performs a binary search using IComparable. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparable implementation before this method is calling, the result
            is not guaranteed. The value passed in must implement IComparable, unless it is null.
            The IComparable.CompareTo method will be called on the value passed in, with the
            values in the queue as parameters, rather than the other way round. No test is made
            to make sure that the types of item are the same - it is up to the implementation of
            IComparable to throw an exception if incomparable types are presented.
            A null reference is treated as being less than any item, (so passing in null will always 
            return 0 or -1). The implementation of IComparable is never asked to compare to null.
            </summary>
            <param name="obj">The item to search for</param>
            <returns>
            A location in the queue containing the item, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Performs a binary search using the specified IComparer. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparer implementation before this method is calling, the result
            is not guaranteed. The CompareTo method will be called on the comparer passed in, with the
            specified value as the first parameter, and values in the queue as the second parameter, 
            rather than the other way round.
            While a null reference should be treated as being less than any object in most
            implementations of IComparer, this is not required by this method. Any null references
            (whether in the queue or the specified value itself) are passed directly to the CompareTo
            method. This allow for IComparers to reverse the usual order, if required.
            </summary>
            <param name="obj">The object to search for</param>
            <param name="comparer">The comparator to use for searching. Must not be null.</param>
            <returns>
            A location in the queue containing the object, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Performs a binary search using the specified Comparison. If the value occurs multiple times,
            there is no guarantee as to which index will be returned. If the value does
            not occur at all, the bitwise complement of the first index containing a larger
            value is returned (or the bitwise complement of the size of the queue if the value
            is larger than any value in the queue). This is the location at which the value should
            be inserted to preserve sort order. If the list is not sorted according to 
            the appropriate IComparer implementation before this method is calling, the result
            is not guaranteed. The CompareTo method will be called on the comparer passed in, with the
            specified value as the first parameter, and values in the queue as the second parameter, 
            rather than the other way round.
            While a null reference should be treated as being less than any object in most
            implementations of IComparer, this is not required by this method. Any null references
            (whether in the queue or the specified value itself) are passed directly to the CompareTo
            method. This allow for Comparisons to reverse the usual order, if required.
            </summary>
            <param name="obj">The object to search for</param>
            <param name="comparison">The comparison to use for searching. Must not be null.</param>
            <returns>
            A location in the queue containing the object, or the bitwise complement of the 
            first index containing a larger value.
            </returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the queue.
            Note that due to the way C# 2.0 iterators work, we cannot spot changes 
            to the queue after the enumerator was fetched but before MoveNext() is first
            called.
            </summary>
            <returns>Returns an enumerator for the entire queue.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the queue.
            </summary>
            <returns>Returns an enumerator for the entire queue.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.System#ICloneable#Clone">
            <summary>
            Creates a new queue with the same contents as this queue.
            The queues are separate, however - adding an item to the returned
            queue doesn't affect the current queue or vice versa.
            A new sync root is also supplied.
            </summary>
            <returns>A clone of the current queue</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Clone">
            <summary>
            Strongly typed version of ICloneable.Clone. Creates a new queue 
            with the same contents as this queue.
            The queues are separate, however - adding an item to the returned
            queue doesn't affect the current queue or vice versa.
            A new sync root is also supplied.
            </summary>
            <returns>A clone of the current queue</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the queue to a new capacity, optionally leaving a gap at
            a specified logical index so that a new item can be slotted in 
            without further copying
            </summary>
            <param name="newCapacity">The new capacity</param>
            <param name="gapIndex">The logical index at which to insert a gap,
            or -1 for no gap</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Add(`0)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Contains(`0)">
            <summary>
            Returns whether or not the queue contains the given item,
            using the default EqualityComparer if the item to find is
            non-null.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the queue to the given array, beginning at
            the specified index in the array.
            </summary>
            <param name="dest">The array to copy the contents of the queue into</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.RandomAccessQueue`1.Remove(`0)">
            <summary>
            Removes the given item from the queue, if it is present. The first
            equal value is removed.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.Count">
            <summary>
            The number of items in the queue.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.Item(System.Int32)">
            <summary>
            Indexer for the class, allowing items to be retrieved by
            index and replaced.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.Capacity">
            <summary>
            Current capacity of the queue - the size of the buffer.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.SyncRoot">
            <summary>
            An object reference to synchronize on when using the queue
            from multiple threads. This reference isn't used anywhere
            in the class itself. The same reference will always be returned
            for the same queue, and this will never be the same as the reference
            returned for a different queue, even a clone.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.IsSynchronized">
            <summary>
            Returns false, to indicate that this queue is not synchronized.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.RandomAccessQueue`1.IsReadOnly">
            <summary>
            Returns false, to indicate that this queue is not read-only.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Collections.ReadOnlyDictionary`2">
            <summary>
            Read-only dictionary.
            </summary>
            <typeparam name="TKey">Item key type</typeparam>
            <typeparam name="TValue">Item value type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source dictionary</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Gets the dictionary enumerator.
            </summary>
            <returns>Dictionary enumerator</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Checks if dictionary contains the key.
            </summary>
            <param name="key">Item key</param>
            <returns>True if dictionary contains the key, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value by using the provided key.
            </summary>
            <param name="key">Item key</param>
            <param name="value">Item value</param>
            <returns>True if value is retrieved, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks if dictionary contains the item.
            </summary>
            <param name="item">Item to check</param>
            <returns>True if dictionary contains the item, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the dictionary items to an array.
            </summary>
            <param name="array">Array where to copy items</param>
            <param name="arrayIndex">Start at array index</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Not supported. It is a read-only dictionary.
            </summary>
            <param name="key">Item key</param>
            <param name="value">Item value</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            Not supported. It is a read-only dictionary.
            </summary>
            <param name="key">Item key</param>
            <returns>False</returns>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value by provided key.
            </summary>
            <param name="key">Item key</param>
            <returns>Item value</returns>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets the dictionary keys.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets the dictionary values.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the item count.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Checks if dictionary is read-only.
            <para>
            Note: This defaults to True.
            </para>
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
            <summary>
            Gets the item value by the provided key.
            </summary>
            <param name="key">Item key</param>
            <returns>Item value</returns>
        </member>
        <member name="T:MonoSoftware.Core.Collections.ThreadSafeDictionary`2">
            <summary>
            Thread safe dictionary.
            </summary>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
            <remarks>
            For reference, please see the http://devplanet.com/blogs/brianr/archive/2008/09/29/thread-safe-dictionary-update.aspx.
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge does a blind remove, and then add if the new value is different from the old one.
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value</param>
            <remarks>
            This method is change from the author's original implementation, write lock happens only if key doesn't exist or if the new value is different from the old one.
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the Dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false. This method
                also returns false if key was not found in the original Dictionary.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the Dictionary
                contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the Dictionary.</param>
            <returns>true if the Dictionary contains
                an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if
                the key is found; otherwise, the default value for the type of the value
                parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements Dictionary
                contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the Collection.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the Collection contains
                a specific value.
            </summary>
            <param name="item">The object to locate in the Collection.</param>
            <returns>true if item is found in the Collection; otherwise,
                false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the Collection.
            </summary>
            <param name="item">The object to add to the Collection.</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the Dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the Collection.
            </summary>
            <param name="item">The object to remove from the Collection.</param>
            <returns>true if item was successfully removed from the Collection;
                otherwise, false. This method also returns false if item is not found in
                the original Collection.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the Collection to an
                System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
                copied from Collection. The System.Array must
                have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Gets the dictionary enumerator.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.CreateEnumerator">
            <summary>
            This method was not originally implemented, the author threw exception because he didn't know how to implement thread-safe enumerator internally.
            This code's logic was picked up from reflector - System.Web.Caching.CacheSingle.CreateEnumerator() - internally called by System.Web.Caching.Cache
            </summary>
            <returns></returns>
            <remarks>
            Not sure if the content should be deep copied here, I think it shouldn't, only dictionary should be thread-safe, not its content too.
            </remarks>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the dictionary item.
            </summary>
            <param name="key">The key of the item to get or set</param>
            <returns>Dictionary item</returns>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets a Collection containing the keys of
                the Dictionary.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Values">
            <summary>
            Gets an Collection containing the values in
                the Dictionary.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the Collection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:MonoSoftware.Core.Collections.ThreadSafeDictionary`2.IsReadOnly" -->
        <member name="T:MonoSoftware.Core.Cryptography.DESExtension">
            <summary>
            Helper class to encrypt or decrypt data.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.DESExtension.SecretKey">
            <summary>
            Secret key used for encryption and decryption.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Encrypt(System.String)">
            <summary>
            Encrypts the data using DES crypto service provider, returns a base64-encoded encrypted string.
            </summary>
            <param name="data">Encryption data</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the data using DES crypto service provider, returns a base64-encoded encrypted string.
            </summary>
            <param name="key">Encryption key.</param>
            <param name="data">Encryption data.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Encrypt(System.String,System.Byte[])">
            <summary>
            Encrypts the data using DES crypto service provider, returns a base64-encoded encrypted string.
            </summary>
            <param name="key">Encryption key.</param>
            <param name="data">Encryption data.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Decrypt(System.String)">
            <summary>
            Decrypts the base64-encoded encrypted data using DES crypto provider service.
            </summary>
            <param name="data">Encrypted data</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the base64-encoded encrypted data using DES crypto provider service.
            </summary>
            <param name="data">Encrypted data</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.DESExtension.Decrypt(System.String,System.Byte[])">
            <summary>
            Decrypts the base64-encoded encrypted data using DES crypto provider service.
            </summary>
            <param name="data">Encrypted data</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="T:MonoSoftware.Core.ExceptionExtension">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.ExceptionExtension.GetDetailedErrorMessage(System.Exception,System.String)">
            <summary>
            Returns detailed error message that includes the message and stack trace from exception and every inner exception. 
            </summary>
            <param name="exception">Exception</param>
            <param name="newLine">New line string</param>
            <returns>Detailed error message</returns>
        </member>
        <member name="T:MonoSoftware.Core.MethodInfoExtension">
            <summary>
            MethodInfo related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.MethodInfoExtension.CreateNonVirtualDynamicMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets the DynamicMethod from the MethodInfo based on IL Generator. Used for getting the original virtual, non inherited method of a grandparent base type.
            </summary>
            <param name="method">Source MethodInfo</param>
            <returns>DynamicMethod</returns>
            <remarks>
            http://kennethxu.blogspot.com/2009/05/cnet-calling-grandparent-virtual-method.html
            </remarks>
        </member>
        <member name="T:MonoSoftware.Core.GeoCoordinate">
            <summary>
            Defines geographical coordinate.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes new geographical coordinate.
            </summary>
            <param name="latitude">Latitude.</param>
            <param name="longitude">Longitude.</param>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.ToString">
            <summary>
            Returns geographical coordinate string representasion.
            </summary>
            <returns>Geographical coordinate string representasion.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.ToDegreesString">
            <summary>
            Returns geographical coordinate string representasion (ie. N 41° 22' 33'', E 23° 44' 55'').
            </summary>
            <returns>Geographical coordinate string representasion in degrees.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.Equals(System.Object)">
            <summary>
            Determines wheter this coordinates containes same latitude and longitude as the specified object.
            </summary>
            <param name="other">Object to test.</param>
            <returns>True if coordinates are same.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.Equals(MonoSoftware.Core.GeoCoordinate)">
            <summary>
            Determines wheter this coordinates containes same latitude and longitude as the specified GeoCoordinate.
            </summary>
            <param name="other">GeoCoordinate to test.</param>
            <returns>True if coordinates are same.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <returns>Instance hash code.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.Distance(MonoSoftware.Core.GeoCoordinate)">
            <summary>
            Calculates distance between this instance and the specified GeoCoordinate in kilometers.
            </summary>
            <param name="point">GeoCoordinate used to calculate distance.</param>
            <returns>Distance in kilometers.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GeoCoordinate.Distance(MonoSoftware.Core.GeoCoordinate,MonoSoftware.Core.DistanceMeasurementUnit)">
            <summary>
            Calculates distance between this instance and the specified GeoCoordinate in the specified measurment unit.
            </summary>
            <param name="point">GeoCoordinate used to calculate distance.</param>
            <param name="unit">Measurment unit used to calculate distance.</param>
            <returns>Distance in the specified measurment unit.</returns>
        </member>
        <member name="P:MonoSoftware.Core.GeoCoordinate.Latitude">
            <summary>
            Decimal latitude.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.GeoCoordinate.Longitude">
            <summary>
            Decimal longitude.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.DistanceMeasurementUnit">
            <summary>
            Measurment unit for distance calculation.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.DistanceMeasurementUnit.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.DistanceMeasurementUnit.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.DistanceMeasurementUnit.NauticalMiles">
            <summary>
            Nauzical miles.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.InstanceProvider">
            <summary>
            Instance provider used for the instantiation of the object that uses encapsulated creation methodology.
            </summary>
            <remarks>
            All methods should returns an instance of the object, wraps the constructor to allow for encapsulated instatiation, so the logic in he constructor can be changed without changing the client code.
            Reference: http://www.netobjectives.com/ezines/ez0405NetObj_PerspectivesOfUseVsCreationInOODesign.pdf
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.InstanceProvider.GetInstance``1">
            <summary>
            Get an instance used for wrapped constructor type classes.
            </summary>
            <remarks>
            Returns an instance of the object, wraps the constructor to allow for encapsulated instatiation, so the logic in he constructor can be changed without changing the client code.
            Reference: http://www.netobjectives.com/ezines/ez0405NetObj_PerspectivesOfUseVsCreationInOODesign.pdf
            </remarks>
            <typeparam name="T">Object type</typeparam>
            <returns>Object instance</returns>
        </member>
        <member name="M:MonoSoftware.Core.InstanceProvider.GetInstance``1(System.Object[])">
            <summary>
            Get an instance used for wrapped constructor type objects.
            </summary>
            <remarks>
            Returns an instance of the object, wraps the constructor to allow for encapsulated instatiation, so the logic in he constructor can be changed without changing the client code.
            Reference: http://www.netobjectives.com/ezines/ez0405NetObj_PerspectivesOfUseVsCreationInOODesign.pdf
            </remarks>
            <typeparam name="T">Object type</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Object instance</returns>
        </member>
        <member name="M:MonoSoftware.Core.InstanceProvider.GetInstance(System.Type)">
            <summary>
            Get an instance used for wrapped constructor type objects.
            </summary>
            <remarks>
            Returns an instance of the object, wraps the constructor to allow for encapsulated instatiation, so the logic in he constructor can be changed without changing the client code.
            Reference: http://www.netobjectives.com/ezines/ez0405NetObj_PerspectivesOfUseVsCreationInOODesign.pdf
            </remarks>
            <param name="objectType">Object type</param>
            <returns>Object instance</returns>
        </member>
        <member name="M:MonoSoftware.Core.InstanceProvider.GetInstance(System.Type,System.Object[])">
            <summary>
            Get an instance used for wrapped constructor type objects.
            </summary>
            <remarks>
            Returns an instance of the object, wraps the constructor to allow for encapsulated instatiation, so the logic in he constructor can be changed without changing the client code.
            Reference: http://www.netobjectives.com/ezines/ez0405NetObj_PerspectivesOfUseVsCreationInOODesign.pdf
            </remarks>
            <param name="objectType">Object type</param>
            <param name="args">Constructor arguments</param>
            <returns>Object instance</returns>
        </member>
        <member name="T:MonoSoftware.Core.Drawing.ImageFormatterEventArgs">
            <summary>
            Event arguments for <see cref="T:MonoSoftware.Core.Drawing.ImageFormatter"/> which creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Source image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.#ctor(System.Boolean,System.Boolean,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="useSuppliedSize">Use supplied size. False: Image W/H is used; True: Supplied W/H is used</param>
            <param name="maintainAspectRatio">Maintain aspect ratio</param>
            <param name="image">Source image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageFormat">Image format</param>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.#ctor(System.Boolean,System.Boolean,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.PixelOffsetMode,System.Drawing.Drawing2D.CompositingQuality)">
            <summary>
            Constructor.
            </summary>
            <param name="useSuppliedSize">Use supplied size. False: Image W/H is used; True: Supplied W/H is used</param>
            <param name="maintainAspectRatio">Maintain aspect ratio</param>
            <param name="image">Source image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageFormat">Image format</param>
            <param name="interpolationMode">Interpolation mode</param>
            <param name="smoothingMode">Smoothing mode</param>
            <param name="pixelOffsetMode">Pixel offset mode</param>
            <param name="compositingQuality">Compositing quality</param>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.UseSuppliedSize">
            <summary>
            Gets a value indicating whether to use supplied size. False: Image W/H is used; True: Supplied W/H is used.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.MaintainAspectRatio">
            <summary>
            Gets a value indicating whether to maintain aspect ratio.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.Image">
            <summary>
            Gets the source image value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.Width">
            <summary>
            Gets the width value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.Height">
            <summary>
            Gets the height value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.ImageFormat">
            <summary>
            Gets the image format value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.InterpolationMode">
            <summary>
            Gets the interpolation mode value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.SmoothingMode">
            <summary>
            Gets the smoothing mode value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.PixelOffsetMode">
            <summary>
            Gets the pixel offset mode value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatterEventArgs.CompositingQuality">
            <summary>
            Gets the compositing quality value.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.JsonSerializer`1">
            <summary>
            Json serializer.
            </summary>
            <typeparam name="T">Object type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer`1.Serialize(`0)">
            <summary>
            Serialize from Objects to JSON content.
            </summary>
            <param name="content">Serializes object to JSON.</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer`1.Deserialize(System.String)">
            <summary>
            Deserialize to objects from a JSON stream.
            </summary>
            <param name="content">Serialized content.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize to objects from a stream.
            </summary>
            <param name="content">Content stream.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer`1.DeepCopy(`0)">
            <summary>
            Deep copy returns exact copy of provided object.
            </summary>
            <param name="o">Object to copy</param>
            <returns>Copy of the object</returns>
        </member>
        <member name="T:MonoSoftware.Core.JsonSerializer">
            <summary>
            Json serializer.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serialize from Objects to JSON content.
            </summary>
            <param name="content">Serializes object to JSON.</param>
            <param name="type">Object type</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.GetBytes(System.Object,System.Type)">
            <summary>
            Serialize from Objects to JSON content presented in the byte array.
            </summary>
            <param name="content">Serializes object to JSON.</param>
            <param name="type">Object type</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserialize to objects from a JSON stream.
            </summary>
            <param name="content">Serialized content.</param>
            <param name="type">Object type</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserialize to objects from a JSON stream.
            </summary>
            <param name="content">Serialized content.</param>
            <param name="type">Object type</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserialize to objects from a stream.
            </summary>
            <param name="content">Content stream.</param>
            <param name="type">Object type</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MonoSoftware.Core.JsonSerializer.DeepCopy(System.Object)">
            <summary>
            Deep copy returns exact copy of provided object.
            </summary>
            <param name="o">Object to copy</param>
            <returns>Copy of the object</returns>
        </member>
        <member name="T:MonoSoftware.Core.NETDataContractSerializer">
            <summary>
            Used for serialization/deserialization of an object.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.NETDataContractSerializer.Serialize(System.Object)">
            <summary>
            Serialize the object.
            </summary>
            <param name="o">Object to serialize</param>
            <returns>Serialized object</returns>
        </member>
        <member name="M:MonoSoftware.Core.NETDataContractSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserialize the object.
            </summary>
            <param name="buffer">Serialized object</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:MonoSoftware.Core.NETDataContractSerializer.DeepCopy(System.Object)">
            <summary>
            Performs the "Deep copy" of an object via serialization and deserialization.
            </summary>
            <param name="o">Object to copy</param>
            <returns>Copy of the object</returns>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.FnvHash">
            <summary>
            FNV Hash a 120 bit hash which will produce a 30 character hex string.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.FnvHash.GetHash(System.String,System.Int32)">
            <summary>
            Gets the FNV hash.
            </summary>
            <param name="value">Value to hash</param>
            <param name="hashBitSize">Hash bit size</param>
            <returns>Hashed value</returns>
        </member>
        <member name="T:MonoSoftware.Core.CancelEventArgs`1">
            <summary>
            Generic cancel event argument.
            </summary>
            <typeparam name="T">Argument type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.CancelEventArgs`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="P:MonoSoftware.Core.CancelEventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.EventArgs`1">
            <summary>
            Generic event argument.
            </summary>
            <typeparam name="T">Argument type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.EventArgs`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="P:MonoSoftware.Core.EventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.EventArgs`2">
            <summary>
            Generic event argument.
            </summary>
            <typeparam name="T1">Argument type</typeparam>
            <typeparam name="T2">Argument type</typeparam>
        </member>
        <member name="M:MonoSoftware.Core.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="firstValue">First value</param>
            <param name="secondValue">Second value</param>
        </member>
        <member name="P:MonoSoftware.Core.EventArgs`2.FirstValue">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.EventArgs`2.SecondValue">
            <summary>
            Gets the second value.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.ActivatorExtension">
            <summary>
            Activator extension class.
            <para>
            Based on the following: http://bloggingabout.net/blogs/vagif/archive/2010/04/02/don-t-use-activator-createinstance-or-constructorinfo-invoke-use-compiled-lambda-expressions.aspx
            </para>
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.ActivatorExtension.CreateInstance``1(System.Object[])">
            <summary>
            Create an instance of the <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Object of <typeparamref name="T"/> type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ActivatorExtension.CreateInstance(System.Type,System.Object[])">
            <summary>
            Create an instance of the <typeparamref name="T"/>.
            </summary>
            <param name="type">Object type</param>
            <param name="args">Constructor arguments</param>
            <returns>Object</returns>
        </member>
        <member name="M:MonoSoftware.Core.ActivatorExtension.GetActivator``1(System.Reflection.ConstructorInfo)">
            <summary>
            Get an object activator delegate.
            </summary>
            <typeparam name="T">Object type to get the activator for</typeparam>
            <param name="ctor">Constructor information</param>
            <returns>Object activator of <typeparamref name="T"/> type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ActivatorExtension.GetActivator(System.Reflection.ConstructorInfo)">
            <summary>
            Get an object activator delegate.
            </summary>
            <param name="ctor">Constructor information</param>
            <returns>Object activator</returns>
        </member>
        <member name="T:MonoSoftware.Core.ActivatorExtension.ObjectActivator`1">
            <summary>
            Object activator delegate.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Object of <typeparamref name="T"/> type</returns>
        </member>
        <member name="T:MonoSoftware.Core.ActivatorExtension.ObjectActivator">
            <summary>
            Object activator delegate.
            </summary>
            <param name="args">Constructor arguments</param>
            <returns>Object</returns>
        </member>
        <member name="T:MonoSoftware.Core.TextWriterExtension">
            <summary>
            Text writer related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.TextWriterExtension.Write(System.IO.TextWriter,System.Text.StringBuilder,System.Int32)">
            <summary> 
            Writes the content of a buffer to the text writer. 
            </summary> 
            <param name="writer">Text writer</param>
            <param name="buffer">String builder buffer</param>
            <param name="bufferSize">Buffer size</param>
        </member>
        <member name="T:MonoSoftware.Core.FileStreamExtension">
            <summary>
            File Stream related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.FileStreamExtension.WriteToEnd(System.Byte[],System.String)">
            <summary> 
            Writes the content of a bit array to the file. 
            </summary> 
            <param name="content">Array holding the content to be written.</param> 
            <param name="filePath">File path.</param> 
        </member>
        <member name="T:MonoSoftware.Core.StreamExtension">
            <summary>
            Stream related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.StreamExtension.ReadToEnd(System.IO.Stream)">
            <summary>
            Reads a stream into byte array.
            </summary>
            <param name="stream">Input stream.</param>
            <returns>Filled byte array.</returns>
        </member>
        <member name="M:MonoSoftware.Core.StreamExtension.ReadToEnd(System.IO.Stream,System.Int32)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length</param>
        </member>
        <member name="M:MonoSoftware.Core.StreamExtension.WriteToEnd(System.IO.Stream,System.Byte[])">
            <summary> 
            Writes the content of a bit array to the stream. 
            </summary> 
            <param name="content">Array holding the content to be written.</param> 
            <param name="stream">Stream.</param> 
        </member>
        <member name="T:MonoSoftware.Core.DateTimeExtension">
            <summary>
            DateTime extension class.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.DateTimeExtension.ToShortDateTimeString(System.DateTime)">
            <summary>
            To short date time string conversion.
            </summary>
            <param name="dateTime">DateTime</param>
            <returns>Short date time string</returns>
        </member>
        <member name="T:MonoSoftware.Core.FileExtension">
            <summary>
            Helper class that holds MonoX file and folder-related utilities.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.FileExtension.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.FileExtension.FindFreeFileName(System.String)">
            <summary>
            Finds a free unique file name in a particular folder to avoid file name duplicates.
            </summary>
            <param name="candidateName">First file name candidate</param>
            <returns>CandidateName or newly generated file name if the candidate name is already taken.</returns>
        </member>
        <member name="M:MonoSoftware.Core.FileExtension.FindFreeDirectoryName(System.String)">
            <summary>
            Finds a free unique directory name in a particular folder to avoid duplicates.
            </summary>
            <param name="candidateName">First directory name candidate</param>
            <returns>CandidateName or newly generated directory name</returns>
        </member>
        <member name="M:MonoSoftware.Core.FileExtension.RemoveForbiddenCharacters(System.String)">
            <summary>
            Removes all forbidden characters from the file name.
            </summary>
            <param name="fileName"></param>
            <returns>Clean path.</returns>
        </member>
        <member name="T:MonoSoftware.Core.ObjectExtension">
            <summary>
            Object related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets a property or field value from the object (Dot notation enabled).
            </summary>
            <param name="o">Object</param>
            <param name="propertyName">Property or field name</param>
            <returns>Property or field value</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.GetPropertyValue(System.Collections.Generic.List{System.String},System.String,System.Object)">
            <summary>
            Gets a value from object's property (Dot notation enabled).
            </summary>
            <param name="propTree">Properties in order</param>
            <param name="propertyName">Property full name</param>
            <param name="valueObject">Value object</param>
            <returns>Property value</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets a property or field value to the object (Dot notation enabled).
            </summary>
            <param name="propertyName">Property name</param>
            <param name="propertyValue">New property value</param>
            <param name="o">Object</param>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.SetPropertyValue(System.Collections.Generic.List{System.String},System.Object,System.String,System.Object)">
            <summary>
            Sets a property or field value to the object (Dot notation enabled).
            </summary>
            <param name="propTree">Properties in order</param>
            <param name="propertyValue">New property value</param>
            <param name="propertyName">Property full name</param>
            <param name="valueObject">Value object</param>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.GetPropertyType(System.Object,System.String)">
            <summary>
            Gets a property type.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="o">Object</param>
            <returns>Property type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.GetPropertyType(System.Collections.Generic.List{System.String},System.String,System.Object)">
            <summary>
            Get property type.
            </summary>
            <param name="propTree">Properties in order</param>
            <param name="propertyName">Property full name</param>
            <param name="valueObject">Value object</param>
            <returns>Data type of the property</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo``1(System.Object)">
            <summary>
            Converts a source to the given type.
            </summary>
            <typeparam name="T">Convert to type</typeparam>
            <param name="source">Source to convert</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo``1(System.Object,System.ComponentModel.TypeConverter)">
            <summary>
            Converts a source to the given type.
            </summary>
            <typeparam name="T">Convert to type</typeparam>
            <param name="source">Source to convert</param>
            <param name="typeConverter">Type converter used to convert value</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts a source to the given type.
            </summary>
            <param name="conversionType">Convert to type</param>
            <param name="source">Source to convert</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo(System.Object,System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Converts a source to the given type.
            </summary>
            <param name="source">Source to convert</param>
            <param name="conversionType">Convert to type</param>
            <param name="typeConverter">Type converter used to convert value</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts a source to the given type.
            </summary>
            <param name="conversionType">Convert to type</param>
            <param name="source">Source to convert</param>
            <param name="convertToUTF8">If true and if source object is a string then it is converted to UTF8</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ConvertTo(System.Object,System.Type,System.ComponentModel.TypeConverter,System.Boolean)">
            <summary>
            Converts a source to the given type.
            </summary>
            <param name="conversionType">Convert to type</param>
            <param name="source">Source to convert</param>
            <param name="typeConverter">Type converter used to convert value</param>
            <param name="convertToUTF8">If true and if source object is a string then it is converted to UTF8</param>
            <returns>Converted source to given type</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.ToUTF8Encoding(System.String)">
            <summary>
            Decodes an input string to UTF8 encoding if current request encoding is different than UTF8. Mostly used with Ajax (all ajax callbacks are encoded in utf-8).
            </summary>
            <param name="inputText">String to decode.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.PropertyExists(System.Object,System.String)">
            <summary>
            Check if property exists.
            </summary>
            <param name="propertyName">Property or field name</param>
            <param name="o">Object</param>
            <returns>True if exists, False if not</returns>
        </member>
        <member name="M:MonoSoftware.Core.ObjectExtension.PropertyExists(System.Collections.Generic.List{System.String},System.Object)">
            <summary>
            Check if property exists.
            </summary>
            <param name="propTree">Propertie in order</param>
            <param name="valueObject">Value object</param>
            <returns>True if exists, False if not</returns>
        </member>
        <member name="T:MonoSoftware.Core.StringBuilderExtension">
            <summary>
            StringBuilder related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.Contains(System.Text.StringBuilder,System.Char)">
            <summary>
             Returns a value indicating whether the specified System.Char object occurs
                within this <see cref="T:System.Text.StringBuilder"/>. (Invariant culture, Ignore case).
            </summary>
            <param name="sb">String builder instance</param>
            <param name="ch">Character to search for</param>
            <returns>true if the value parameter occurs within this <see cref="T:System.Text.StringBuilder"/>, or if the <see cref="T:System.Text.StringBuilder"/> 
            is empty; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Gets the index of the character specified (Invariant culture, Ignore case).
            </summary>
            <param name="sb">String builder instance</param>
            <param name="ch">Character to search for</param>
            <returns>Index of the character</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.Contains(System.Text.StringBuilder,System.String)">
            <summary>
             Returns a value indicating whether the specified System.String object occurs
                within this <see cref="T:System.Text.StringBuilder"/>. (Invariant culture, Ignore case).
            </summary>
            <param name="sb">String builder instance</param>
            <param name="s">String to search for</param>
            <returns>true if the value parameter occurs within this <see cref="T:System.Text.StringBuilder"/>, or if the <see cref="T:System.Text.StringBuilder"/> 
            is empty; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Gets the index of the string specified (Invariant culture, Ignore case).
            </summary>
            <param name="sb">String builder instance</param>
            <param name="s">String to search for</param>
            <returns>Index of the string</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.IndexOf(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Gets the index of the string specified (Invariant culture, Ignore case).
            </summary>
            <param name="sb">String builder instance</param>
            <param name="s">String to search for</param>
            <param name="startIndex">The zero-based starting position of this instance.</param>
            <returns>Index of the string</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.ToChars(System.Text.StringBuilder)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.Char"/> array.
            </summary>
            <param name="sb">String builder instance</param>
            <returns><see cref="T:System.Char"/> array</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.ToChars(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.Char"/> array.
            </summary>
            <param name="sb">String builder instance</param>
            <param name="startIndex">The zero-based starting position of this instance.</param>
            <param name="length">Array length</param>
            <returns><see cref="T:System.Char"/> array</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
                character position.
            </summary>
            <param name="sb">String builder instance</param>
            <param name="startIndex">The zero-based starting position of this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A System.String equivalent to the substring of length length that begins
                at startIndex in this instance, or System.String.Empty if startIndex is equal
                to the length of this instance and length is zero.</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.Replace(System.Text.StringBuilder,System.String,System.Text.StringBuilder)">
            <summary>
            Replaces all occurrences of a specified string in this instance with another
                specified string builder content.
            </summary>
            <param name="sb">String builder</param>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string builder content that replaces oldValue, or null.</param>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.AppendAt(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the source string builder to the end of this instance.
            </summary>
            <param name="sb">String builder</param>
            <param name="source">Source string builder</param>
            <param name="index">Add at index</param>
        </member>
        <member name="M:MonoSoftware.Core.StringBuilderExtension.Replace(System.Text.StringBuilder,System.String,System.String,System.StringComparison)">
            <summary>
            Replaces all occurrences of a specified string in this instance with another
                specified string builder content.
            </summary>
            <param name="sb">String builder</param>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string builder content that replaces oldValue, or null.</param>
            <param name="comparisonType">Comparation type</param>
        </member>
        <member name="T:MonoSoftware.Core.StringExtension">
            <summary>
            String related extension methods.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.StringExtension.Wildcards">
            <summary>
            Array of valid wildcards.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Performs advanced string replace (including StringComparison for case insensitive or invariant culture replace).
            </summary>
            <param name="value">original string</param>
            <param name="oldValue">string to replace</param>
            <param name="newValue">replaced string</param>
            <param name="comparisonType">Comparation type</param>
            <returns>Replaced string</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.ToUserFriendlyString(System.String)">
            <summary>
            Returns nicely formatted string from a Pascal cased string (used for database field names, etc.).
            </summary>
            <param name="value">Value to convert</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.ToTrimmedWordString(System.String,System.Int32)">
            <summary>
            Trims a string to the specified length without breaking words and with applying auto ellipsis character (...) at the end of a trimmed string.
            </summary>
            <param name="value">String to trim</param>
            /// <param name="length">Maximum number of characters that a trimmed string should contain minus auto ellipsis character (...)</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.Object)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="source">Object to format.</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.IFormatProvider,System.Object)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="source">Object to format.</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.IFormatProvider,System.Object,System.String)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="source">Object to format.</param>
            <param name="value">Named format string value</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.IFormatProvider,System.Object,System.String,System.Char,System.Char)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="source">Object to format.</param>
            <param name="value">Named format string value</param>
            <param name="startDelimiter">Start of format parameter</param>
            <param name="endDelimiter">End of format parameter</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.IFormatProvider,System.Object,System.String,System.Boolean)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="source">Object to format.</param>
            <param name="value">Named format string value</param>
            <param name="useRegexReplace">Use regular expression replace</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.FormatWith(System.String,System.IFormatProvider,System.Object,System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Named format string extension method - instead of string.Format("{0} first, {1} second", 3.14, DateTime.Now) the following can be used:
            string.Format("{pi} first, {date} second", someObj)
            Formats such as {foo.bar.baz} where baz is a property of bar which is a property of foo are also allowed.
            </summary>
            <param name="format">Format string.</param>
            <param name="provider">Format provider.</param>
            <param name="source">Object to format.</param>
            <param name="value">Named format string value</param>
            <param name="startDelimiter">Start of format parameter</param>
            <param name="endDelimiter">End of format parameter</param>
            <param name="useRegexReplace">Use regular expression replace</param>
            <returns>Formatted string.</returns>
            <remarks>
            For further reference, check http://haacked.com/archive/2009/01/04/fun-with-named-formats-string-parsing-and-edge-cases.aspx;
            </remarks>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.Match(System.String,System.String)">
            <summary>
            Returns true if the string matches the pattern which may contain * and ? wildcards.
            Matching is done without regard to case.
            </summary>
            <param name="s">String to match</param>
            <param name="pattern">Pattern</param>
            <returns>True if the string matches, false otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.Match(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the string matches the pattern which may contain * and ? wildcards.
            </summary>
            <param name="pattern">Pattern</param>
            <param name="s">String to match</param>
            <param name="caseSensitive">Defines if the match is case sensitive</param>
            <returns>True if the string matches, false otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.ConvertToEncoding(System.String,System.String,System.String)">
            <summary>
            Converts text from one encoding to another - must be used with Ajax since it doesn't support encodings other than utf-8.
            </summary>
            <param name="srcEncoding">Source encoding (e.g. Win-1250)</param>
            <param name="destEncoding">Destination encoding (e.g. UTF-8)</param>
            <param name="textToConvert">Text to convert</param>
            <returns>Converted encoded text</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.ConvertToEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts text from one encoding to another - must be used with Ajax since it doesn't support encodings other than utf-8.
            </summary>
            <param name="src">Source encoding (e.g. Win-1250)</param>
            <param name="dest">Destination encoding (e.g. UTF-8)</param>
            <param name="textToConvert">Text to convert</param>
            <returns>Converted encoded text</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.Split(System.String,System.String)">
            <summary>
            Gets a list of items from a specified string that are splited by a separator term.
            </summary>
            <param name="text">Text value to be split</param>
            <param name="separator">Term used to split text</param>
            <returns>String array</returns>
        </member>
        <member name="M:MonoSoftware.Core.StringExtension.GetPhrases(System.String)">
            <summary>
            Gets the phrases from the provided text.
            </summary>
            <param name="text">Text to parse.</param>
            <returns>Phrase list.</returns>
        </member>
        <member name="T:MonoSoftware.Core.GuidExtension">
            <summary>
            A class for sequential guids and additional guid management methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.NewSequentialGuid">
            <summary>
            Convinience method for custom implementation of new Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.NewComb">
            <summary>
            Descr/Purpose: Create a COMB. (A COMBination of an 
            ordinary GUID and the current datetime.
            The current datetime should be in 
            SQL Server format. That is days after
            1st of Jan 1900 and the no of milliseconds
            after midnight, divided by 3.3333...
            It is the lowest six bytes of the GUID
            that get exchanged for the current datetime.
            
            CREATED BY: 2002-04-04, Jimmy Nilsson
            
            Reference: http://www.informit.com/articles/article.asp?p=25862
            </summary>
            <returns>A new Guid (COMB).</returns>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.Compare(System.Guid,System.Guid)">
            <summary>
            Compares two specified System.Guid objects and returns an integer that
                indicates their relationship to one another in the sort order.
            </summary>
            <param name="g1">The first System.Guid.</param>
            <param name="g2">The second System.Guid.</param>
            <returns>A 32-bit signed integer indicating the relationship between the two
                comparands.  Value Condition Less than zero g1 is less than g2. Zero
                g1 equals g2. Greater than zero g1 is greater than g2.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.IsNullOrEmpty(System.Object)">
            <summary>
            Indicates whether the specified System.Guid object is null or an System.Guid.Empty
            </summary>
            <param name="g">A System.Guid reference.</param>
            <returns>true if the value parameter is null or an empty guid; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.NewDeterministicGuid(System.String)">
            <summary>
            Generates a deterministic, unique (hash) Guid for an input string.
            </summary>
            <param name="input">Input string for which a Guid is generated.</param>
            <returns>Deterministic Guid.</returns>
        </member>
        <member name="M:MonoSoftware.Core.GuidExtension.TryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a Guid to its Guid 
            equivalent. A return value indicates whether the operation 
            succeeded. 
            </summary>
            <param name="s">A string containing a Guid to convert.</param>
            <param name="returnValue">Converted Guid, or Guid.Empty if the conversion was not successful.</param>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="T:MonoSoftware.Core.Int128">
            <summary>
            128 bit Integer.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Int128.#ctor(System.UInt64,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="low">Lowest value</param>
            <param name="high">Highest value</param>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.Int64)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from 64bit to 128bit integer.
            </summary>
            <param name="i">64bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.UInt64)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from unsigned 64bit to 128bit integer.
            </summary>
            <param name="u">Unsigned 64bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.Int32)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from 32bit to 128bit integer.
            </summary>
            <param name="i">32bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.UInt32)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from unsigend 32bit to 128bit integer.
            </summary>
            <param name="u">Unsigned 32bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.Int16)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from 16bit to 128bit integer.
            </summary>
            <param name="i">16bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.UInt16)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from unsigend 16bit to 128bit integer.
            </summary>
            <param name="u">Unsigned 16bit integer</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.Char)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from character to 128bit integer.
            </summary>
            <param name="c">Character</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.SByte)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from signed byte to 128bit integer.
            </summary>
            <param name="i">Signed byte</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Implicit(System.Byte)~MonoSoftware.Core.Int128">
            <summary>
            Implicit conversion from byte to 128bit integer.
            </summary>
            <param name="u">Byte</param>
            <returns>128bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.Int64">
            <summary>
            Explicit conversion from 128bit integer to 64bit integer.
            </summary>
            <param name="a">128bit integer</param>
            <returns>64bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.UInt64">
            <summary>
            Explicit conversion from 128bit integer to unsigned 64bit integer.
            </summary>
            <param name="a">128bit integer</param>
            <returns>Unsigned integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.Int32">
            <summary>
            Explicit conversion from 128bit integer to 32bit integer.
            </summary>
            <param name="a"></param>
            <returns>32bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.UInt32">
            <summary>
            Explicit conversion from 128bit integer to unsigned 32bit integer.
            </summary>
            <param name="a"></param>
            <returns>Unsigned 32bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.Int16">
            <summary>
            Explicit conversion from 128bit integer to 16bit integer.
            </summary>
            <param name="a"></param>
            <returns>16bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.UInt16">
            <summary>
            Explicit conversion from 128bit integer to unsigned 16bit integer.
            </summary>
            <param name="a">128bit integer</param>
            <returns>Unsigned 16bit integer</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.Char">
            <summary>
            Explicit conversion from 128bit integer to character.
            </summary>
            <param name="a">128bit integer</param>
            <returns>Character</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.SByte">
            <summary>
            Explicit conversion from 128bit integer to signed byte.
            </summary>
            <param name="a">128bit integer</param>
            <returns>Signed byte</returns>
        </member>
        <member name="M:MonoSoftware.Core.Int128.op_Explicit(MonoSoftware.Core.Int128)~System.Byte">
            <summary>
            Explicit conversion from 128bit integer to byte.
            </summary>
            <param name="a">128bit integer</param>
            <returns>Byte</returns>
        </member>
        <member name="P:MonoSoftware.Core.Int128.Low">
            <summary>
            Gets the lowest possible value.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Int128.High">
            <summary>
            Gets the highest possible value.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.MailQueueClient">
            <summary>
            Class that is used to work with MSMQ as a storage mechanism for processing mail messages. 
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailQueueClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailQueueClient.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.MailQueueClient.AddToQueue(System.Net.Mail.MailMessage,System.String,System.Int32,System.Messaging.MessagePriority)">
            <summary>
            Adds a mail message to MSMQ.
            </summary>
            <param name="message">Mail message to process.</param>
            <param name="label">MSMQ message label.</param>
            <param name="appSpecific">Application specific flag.</param>
            <param name="priority">Message priority.</param>
        </member>
        <member name="P:MonoSoftware.Core.Mail.MailQueueClient.QueueName">
            <summary>
            Queue name to use.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Mail.SerializableMailMessage">
            
             Serializable MailMessage object that can be used with MSMQ or any other type of service that requires serializable objects.
            
        </member>
        <member name="M:MonoSoftware.Core.Mail.SerializableMailMessage.#ctor(System.Net.Mail.MailMessage)">
            <summary>
            Creates a new instance of the SerializableMailMessage based on the original MailMessage that is passed in as a parameter.
            </summary>
            <param name="mm">Mail message.</param>
        </member>
        <member name="M:MonoSoftware.Core.Mail.SerializableMailMessage.GetMailMessage">
            <summary>
            Returns the MailMessge object from the Serializable object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoSoftware.Core.Mail.SerializableMailMessage.RetriesLeft">
            <summary>
            Gets or sets the number of send retires left.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Mail.SerializableMailMessage.LastRetryTime">
            <summary>
            Gets or sets the last retry time.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.PrinterConverter">
            <summary>
            Provides a type converter to convert printer objects to and from other representations.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.PrinterConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be
                picked from a list, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <returns>true if System.ComponentModel.TypeConverter.GetStandardValues() should be
                called to find a common set of values the object supports; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.PrinterConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from System.ComponentModel.TypeConverter.GetStandardValues()
                is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <returns>true if the System.ComponentModel.TypeConverter.StandardValuesCollection
                returned from System.ComponentModel.TypeConverter.GetStandardValues() is
                an exhaustive list of possible values; false if other values are possible.</returns>
        </member>
        <member name="M:MonoSoftware.Core.PrinterConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter
                is designed for when provided with a format context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context
                that can be used to extract additional information about the environment
                from which this converter is invoked. This parameter or properties of this
                parameter can be null.</param>
            <returns>A System.ComponentModel.TypeConverter.StandardValuesCollection that holds
                a standard set of valid values, or null if the data type does not support
                a standard set of values.</returns>
        </member>
        <member name="T:MonoSoftware.Core.Regex.RegexExpressions">
            <summary>
            Common, frequently used, Regex expressions.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Regex.RegexExpressions.EmailExpression">
            <summary>
            Used for validation of email addresses.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Regex.RegexExpressions.NameExpression">
            <summary>
            This is for validation of - Please use only letters, numbers and punctuation.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Regex.RegexExpressions.TimeExpression">
            <summary>
            Used for time validation.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.EncryptionProviderStore">
            <summary>
            A local machine or a user store used to encrypt and decrypt the data
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EncryptionProviderStore.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EncryptionProviderStore.User">
            <summary>
            User
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.EncryptionProvider">
            <summary>
            Uses the Data Protection API (DPAPI) to encrypt and decrypt data 
            based on the logged in user or local machine. 
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EncryptionProvider.Encrypt(System.String,MonoSoftware.Core.Cryptography.EncryptionProviderStore)">
            <summary>
            Encrypts the data using DPAPI, returns a base64-encoded encrypted string.
            </summary>
            <param name="data"></param>
            <param name="encryptionProviderStore"></param>
            <returns>A base64-encoded encrypted string.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EncryptionProvider.Decrypt(System.String,MonoSoftware.Core.Cryptography.EncryptionProviderStore)">
            <summary>
            Decrypts the base64-encoded encrypted data using DPAPI.
            </summary>
            <param name="data"></param>
            <param name="encryptionProviderStore"></param>
            <returns>Decrypted string.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EncryptionProvider.Serialize(System.Object,System.String)">
            <summary>
            Serializes data, converts it to base 64 string, encrypts it based on a current user store and saves it to a file.
            </summary>
            <param name="data"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EncryptionProvider.Deserialize(System.String)">
            <summary>
            Reads data from a file, decrypts it based on a current user store, converts it from base 64 string and deserializes it.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.EzRsa">
            <summary>
            RSA public key encryption in shared Web hosting environments. Based on original work by Paul Sanders (http://www.alpinesoft.co.uk), Christophe Devine and Chew Keong. 
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="keylen">keylen is in bits, and should be a multiple of 8</param>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.FromXmlString(System.String)">
            <summary>
            Initialize an EzRsa object from an XML string
            Uses the same markup scheme as RSACryptoServiceProvider.FromXmlString (qv)
            </summary>
            <param name="xmlString">Source xml string</param>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.ToXmlString(System.Boolean)">
            <summary>
            Implementing functionality of RSACryptoServiceProvider.ToXmlString (qv)
            </summary>
            <param name="includePrivateParameters">Include private parameters</param>
            <returns>Xml string</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Implemntation of RSACryptoServiceProvider.ImportParameters (qv)
            </summary>
            <param name="parameters">RSA parameters</param>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.ExportParameters(System.Boolean)">
            <summary>
            Implementation of RSACryptoServiceProvider.ExportParameters (qv)
            </summary>
            <param name="includePrivateParameters">Include private parameters</param>
            <returns>RSA parameters</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.GenerateKeyPair(System.Int32)">
            <summary>
            Generate an RSA keypair
            Popular exponents are 3, 17 and 65537; the bigger it is, the slower encryption becomes
            </summary>
            <param name="exponent">Exponents are 3, 17 and 65537; the bigger it is, the slower encryption becomes</param>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.DoPublic(System.Byte[])">
            <summary>
            Perform an RSA public key operation on input
            </summary>
            <param name="input">Input byte array</param>
            <returns>Result of the public key operation</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.DoPrivate(System.Byte[])">
            <summary>
            Perform an RSA private key operation on input
            </summary>
            <param name="input">Input byte array</param>
            <returns>Result of the private key operation</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.CheckPrivateKey">
            <summary>
            Check if our private key is valid.
            </summary>
            <returns>True if key is valid, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.Encrypt(System.Byte[],System.Boolean)">
            <summary>
            Encrypt a message and pack it up into PKCS#1 v1.5 format
            Plug compatible with RSACryptoServiceProvider.Encrypt
            </summary>
            <param name="input">Message to encrypt</param>
            <param name="fOAEP"></param>
            <returns>Encrypted message</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.Decrypt(System.Byte[],System.Boolean)">
            <summary>
            Decrypt a message in PKCS#1 v1.5 format
            Plug compatible with RSACryptoServiceProvider.Decrypt
            </summary>
            <param name="input">Encrypted message</param>
            <param name="fOAEP"></param>
            <returns>Decrypted message</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.MapHashAlgorithmOID(System.String)">
            <summary>
            Map a hash algorithm OID to a HASH_ALGORITHM
            HASH_ALGORITHM knows about types of hash that CryptoConfig.MapNameToOID doesn't (and vice-versa)
            </summary>
            <param name="hash_algorithm_oid"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.SignHash(System.Byte[],System.String)">
            <summary>
            SignHash - plug compatible with RSACryptoServiceProvider.SignHash
            </summary>
            <param name="sign_me"></param>
            <param name="hash_algorithm_oid"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.SignHash(System.Byte[],MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM)">
            <summary>
            Sign a message digest and pack it up into PKCS#1 format
            </summary>
            <param name="sign_me"></param>
            <param name="hash_algorithm">Hash algorithm</param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            VerifyHash - plug compatible with RSACryptoServiceProvider.VerifyHash
            </summary>
            <param name="hash"></param>
            <param name="hash_algorithm_oid"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.VerifyHash(System.Byte[],System.Byte[],MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM)">
            <summary>
            Verify a signed PKCS#1 message digest
            </summary>
            <param name="hash"></param>
            <param name="signature"></param>
            <param name="hash_algorithm">Hash algorithm</param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            SignData - plug compatible with RSACryptoServiceProvider.SignData,
            but only this one override provided
            </summary>
            <param name="data"></param>
            <param name="hasher"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.VerifyData(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            VerifyData - plug compatible with RSACryptoServiceProvider.VerifyData
            </summary>
            <param name="data"></param>
            <param name="hasher"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.EzRsa.Dispose(System.Boolean)">
            <summary>
            Dispose. Required by AssymetricAlgorithm base class.
            </summary>
            <param name="disposing">Disposing</param>
        </member>
        <member name="P:MonoSoftware.Core.Cryptography.EzRsa.KeyExchangeAlgorithm">
            <summary>
            Gets Required by AssymetricAlgorithm base class.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Cryptography.EzRsa.SignatureAlgorithm">
            <summary>
            Gets Required by AssymetricAlgorithm base class.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Cryptography.EzRsa.KeySize">
            <summary>
            Gets Key size for completeness; set is not implemented 
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM">
            <summary>
            Hash algorithm types.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM.RSA_RAW">
            <summary>
            RSA Raw.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM.RSA_SHA1">
            <summary>
            RSA SHA1.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM.RSA_MD2">
            <summary>
            RSA MD2.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM.RSA_MD4">
            <summary>
            RSA MD4.
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.Cryptography.EzRsa.HASH_ALGORITHM.RSA_MD5">
            <summary>
            RSA MD5.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Cryptography.MD5Extension">
            <summary>
            Helper class to generate hash codes.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.MD5Extension.GenerateMd5Hash(System.String,System.String)">
            <summary>
            Generates MD5 hash.
            </summary>
            <param name="value">Value to hash.</param>
            <param name="salt">Salt value.</param>
            <returns>Hashed string.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.MD5Extension.GenerateUrlFriendlyMd5Hash(System.String,System.String,System.Int32)">
            <summary>
            Generates URL-friendly MD5 hash with the specified length. Note: if parameter length is equal to zero, the original hash will be returned. Specifying any other length increases the risks of colisions and should be used only in specific situations.
            </summary>
            <param name="value">Value to hash.</param>
            <param name="salt">Salt.</param>
            <param name="length">Length of the hashed value.</param>
            <returns>Hashed string.</returns>
        </member>
        <member name="M:MonoSoftware.Core.Cryptography.MD5Extension.GetSalt(System.Int32)">
            <summary>
            Produces totally unique salt value.
            </summary>
            <param name="length">Salt lenght.</param>
            <returns>Random salt.</returns>
        </member>
        <member name="T:MonoSoftware.Core.Security.ImpersonationProvider">
            <summary>
            Windows identity impersonation provider.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Security.ImpersonationProvider.Impersonate(System.String,System.String)">
            <summary>
            Impersonates the user provided.
            </summary>
            <param name="userName">Username</param>
            <param name="password">Password</param>
        </member>
        <member name="T:MonoSoftware.Core.SerializationProxy`2">
            <summary>
            Serialization proxy class used for serializing/deserializing singleton objects, which should be mapped to the existing instance upon deserialization.
            </summary>
            <remarks>
            This class is based upon the following logic: SomeSerializableSingleton.GetObjectData serializes this class and not itself, this class needs also to be ISerializable, so .NET will know
            to call its deserialization constructor upon deserialization. This class's GetObjectData is never called. When the deserialization finishes, the passed _instantiator func is called.
            Check this for more info: http://stackoverflow.com/questions/701656/real-object-references-in-distributed-cache
            </remarks>
            <typeparam name="TOwner"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MonoSoftware.Core.ShortGuid">
            <summary>
            Represents a globally unique identifier (GUID) with a 
            shorter string value. Sguid
            </summary>
        </member>
        <member name="F:MonoSoftware.Core.ShortGuid.Empty">
            <summary>
            A read-only instance of the ShortGuid class whose value 
            is guaranteed to be all zeroes. 
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.#ctor(System.String)">
            <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
            <param name="value">The encoded guid as a 
            base64 string</param>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.#ctor(System.Guid)">
            <summary>
            Creates a ShortGuid from a Guid
            </summary>
            <param name="guid">The Guid to encode</param>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.ToString">
            <summary>
            Returns the base64 encoded guid as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a 
            specified Object represent the same type and value.
            </summary>
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.GetHashCode">
            <summary>
            Returns the HashCode for underlying Guid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.NewGuid">
            <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.Encode(System.String)">
            <summary>
            Creates a new instance of a Guid using the string value, 
            then returns the base64 encoded version of the Guid.
            </summary>
            <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.Encode(System.Guid)">
            <summary>
            Encodes the given Guid as a base64 string that is 22 
            characters long.
            </summary>
            <param name="guid">The Guid to encode</param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.Decode(System.String)">
            <summary>
            Decodes the given base64 string
            </summary>
            <param name="value">The base64 encoded string of a Guid</param>
            <returns>A new Guid</returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Equality(MonoSoftware.Core.ShortGuid,MonoSoftware.Core.ShortGuid)">
            <summary>
            Determines if both ShortGuids have the same underlying 
            Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Inequality(MonoSoftware.Core.ShortGuid,MonoSoftware.Core.ShortGuid)">
            <summary>
            Determines if both ShortGuids do not have the 
            same underlying Guid value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Implicit(MonoSoftware.Core.ShortGuid)~System.String">
            <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Implicit(MonoSoftware.Core.ShortGuid)~System.Guid">
            <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Implicit(System.String)~MonoSoftware.Core.ShortGuid">
            <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
            <param name="shortGuid"></param>
            <returns></returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuid.op_Implicit(System.Guid)~MonoSoftware.Core.ShortGuid">
            <summary>
            Implicitly converts the Guid to a ShortGuid 
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="P:MonoSoftware.Core.ShortGuid.Guid">
            <summary>
            Gets/sets the underlying Guid
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.ShortGuid.Value">
            <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.TypeExtension">
            <summary>
            Type related extension methods.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsNullableType(System.Type)">
            <summary>
            Checks if a type is nullable one.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is nullable, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsNumberType(System.Type)">
            <summary>
            Checks if type is a number type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a number type, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsIntegerNumberType(System.Type)">
            <summary>
            Checks if type is an integer type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is an integer type, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsDecimalNumberType(System.Type)">
            <summary>
            Checks if type is a decimal type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a decimal type, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsDateTimeType(System.Type)">
            <summary>
            Checks if type is a date time type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a date time type, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsBooleanType(System.Type)">
            <summary>
            Checks if type is a boolean type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a boolean, False otherwise </returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.IsGuidType(System.Type)">
            <summary>
            Checks if type is a guid type.
            </summary>
            <param name="type">Type to check</param>
            <returns>True if type is a guid type, False otherwise</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.GetTypeFromName(System.String)">
            <summary>
            Looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies. Credits to Rick Strahl, http://www.west-wind.com/WebLog/posts/145234.aspx
            Allows you to avoid using fully qualified AssemblyQualifiedName.
            </summary>
            <param name="typeName">Type name.</param>
            <returns>Type inferred from the type name.</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.GetTypeFromName(System.String,System.Type)">
            <summary>
            Looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies. 
            Allows you to avoid using fully qualified AssemblyQualifiedName. If type cannot be inferred, returns the fallback type.
            </summary>
            <param name="typeName">Type name.</param>
            <param name="fallbackType">Fallback type.</param>
            <returns>Type inferred from the type name.</returns>
        </member>
        <member name="M:MonoSoftware.Core.TypeExtension.GetNonVirtualMethod``1(System.Type,System.String)">
            <summary>
            Gets the original virtual, non inherited method of a grandparent base type and further down in an inheritance chain.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="type">Base Type</param>
            <param name="name">Method Name</param>
            <returns>TDelegate used for calling the base type method.</returns>
            <remarks>
            http://kennethxu.blogspot.com/2009/05/cnet-calling-grandparent-virtual-method.html
            </remarks>
        </member>
        <member name="T:MonoSoftware.Core.ShortGuidConverter">
            <summary>
            Short guid converter.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
                the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
                using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
                context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:MonoSoftware.Core.ShortGuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
                context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:MonoSoftware.Core.SingletonProvider`1">
            <summary>
            Generic singleton provider.
            </summary>
            <typeparam name="T">Type of object</typeparam>
        </member>
        <member name="P:MonoSoftware.Core.SingletonProvider`1.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.WCF.STAOperationBehaviorAttribute">
            <summary>
            A class used for running WCF Services on STA Threads.
            </summary>
            <remarks>
            Origin: http://www.scottseely.com/Blog/09-07-17/Calling_an_STA_COM_Object_from_a_WCF_Operation.aspx
            Usage:
            [STAOperationBehavior]
            Method Definition
            </remarks>
        </member>
        <member name="T:MonoSoftware.Core.WCF.STAOperationInvoker">
            <summary>
            A class used for running WCF Services on STA Threads. Used via <see cref="T:MonoSoftware.Core.WCF.STAOperationBehaviorAttribute"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MonoSoftware.Core.Utf8StringWriter" -->
        <member name="P:MonoSoftware.Core.Utf8StringWriter.Encoding">
            <summary>
            Gets the string encoding. UTF8 encoding.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.XMLSerializer">
            <summary>
            Xml Serializer class - serializes/deserializes objects to and from XML.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.XMLSerializer.Serialize(System.Object)">
            <summary>
            Serializes an object.
            </summary>
            <param name="objectToSerialize">Object to serialize</param>
            <returns>Serialized object xml</returns>
        </member>
        <member name="M:MonoSoftware.Core.XMLSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes xml.
            </summary>
            <param name="objectType">Deserialization object type</param>
            <param name="xml">Serialized object xml</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:MonoSoftware.Core.XMLSerializer.DeepCopy(System.Object)">
            <summary>
            Deep copy returns exact copy of provided object.
            </summary>
            <param name="o">Object to copy</param>
            <returns>Copy of the object</returns>
        </member>
        <member name="T:MonoSoftware.Core.Components.ExtendedBackgroundWorker">
            <summary>
            Extended background worker.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.CancelAsync">
            <summary>
            Cancel async operation.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Raises Do work event.
            </summary>
            <param name="e">Do work event arguments</param>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Raises Progress changed event.
            </summary>
            <param name="e">Progress changed event arguments</param>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Raises Run worker completed event.
            </summary>
            <param name="e">Worker complete event arguments</param>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Reports background worker progress.
            </summary>
            <param name="percentProgress">Percent completed progress</param>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.ReportProgress(System.Int32,System.Object)">
            <summary>
            Reports background worker progress.
            </summary>
            <param name="percentProgress">Percent completed progress</param>
            <param name="userState">Custom user state</param>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.RunWorkerAsync">
            <summary>
            Starts the background worker asynchronously.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.StopImmediately">
            <summary>
            Stops the bacground worker immediately.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Components.ExtendedBackgroundWorker.RunWorkerAsync(System.Object)">
            <summary>
            Starts the background worker asynchronously with arguments.
            </summary>
            <param name="argument">Custom arguments</param>
        </member>
        <member name="E:MonoSoftware.Core.Components.ExtendedBackgroundWorker.DoWork">
            <summary>
            Do work event.
            </summary>
        </member>
        <member name="E:MonoSoftware.Core.Components.ExtendedBackgroundWorker.ProgressChanged">
            <summary>
            Progress changed event.
            </summary>
        </member>
        <member name="E:MonoSoftware.Core.Components.ExtendedBackgroundWorker.RunWorkerCompleted">
            <summary>
            Background worker complete event.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Components.ExtendedBackgroundWorker.CancellationPending">
            <summary>
            Gets the flag if background worker is in cancellation state.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Components.ExtendedBackgroundWorker.IsBusy">
            <summary>
            Gets the flag if background worker is busy.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Components.ExtendedBackgroundWorker.BackgroundThread">
            <summary>
            Gets the background worker executing thread.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Components.ExtendedBackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets if background worker can report progress.
            </summary>
        </member>
        <member name="P:MonoSoftware.Core.Components.ExtendedBackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets if background worker supports cancellation.
            </summary>
        </member>
        <member name="T:MonoSoftware.Core.Drawing.ImageFormatter">
            <summary>
            Image formatter used to format image in various ways.
            </summary>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Byte[],System.Drawing.Size)">
            <summary>
            Creates a formatted image from the passed raw image (Resizes the original image and converts it to jpg image).
            </summary>
            <param name="image">Raw image</param>
            <param name="size">Size</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a formatted image from the passed raw image (Resizes the original image and converts it to jpg image).
            </summary>
            <param name="image">Raw image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Byte[],System.Drawing.Size,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed raw image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="image">Raw image</param>
            <param name="size">Size</param>
            <param name="imageFormat">Image format</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Byte[],System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed raw image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="image">Raw image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageFormat">Image format</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to jpg image).
            </summary>
            <param name="image">Image</param>
            <param name="size">Size</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to jpg image).
            </summary>
            <param name="image">Image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Drawing.Image,System.Drawing.Size,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="image">Image</param>
            <param name="size">Size</param>
            <param name="imageFormat">Image format</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="image">Image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageFormat">Image format</param>
            <returns>Formatted image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Boolean,System.Boolean,System.Byte[],System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="useSuppliedSize">Use supplied size. False: Image W/H is used; True: Supplied W/H is used</param>
            <param name="maintainAspectRatio">Maintain aspect ratio</param>
            <param name="rawImage">Raw image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imgFormat">Image format</param>
            <returns>Formatted Image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(System.Boolean,System.Boolean,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="useSuppliedSize">Use supplied size. False: Image W/H is used; True: Supplied W/H is used</param>
            <param name="maintainAspectRatio">Maintain aspect ratio</param>
            <param name="image">Source image</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="imageFormat">Image format</param>
            <returns>Formatted Image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.FormatImage(MonoSoftware.Core.Drawing.ImageFormatterEventArgs)">
            <summary>
            Creates a formatted image from the passed image (Resizes the original image and converts it to a specified image type).
            </summary>
            <param name="e">Format image event arguments</param>
            <returns>Formatted Image</returns>
        </member>
        <member name="M:MonoSoftware.Core.Drawing.ImageFormatter.GetImageFormat(System.String)">
            <summary>
            Gets the image format from a file name.
            </summary>
            <param name="fileName">Image file name</param>
            <returns>Image format</returns>
        </member>
        <member name="P:MonoSoftware.Core.Drawing.ImageFormatter.ImageExtensions">
            <summary>
            Gets or sets minimum list of image file extensions.
            </summary>
        </member>
    </members>
</doc>

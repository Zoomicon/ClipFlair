<Window x:Class="ZoomAndPanSample.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:ZoomAndPanSample"
    xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
    Title="Main Window" 
    Height="600" 
    Width="800"
    x:Name="mainWindow"
    FocusManager.FocusedElement="{Binding ElementName=scroller}"
    >
    <Window.Resources>
        
        <!-- UI commands. -->
        <RoutedUICommand x:Key="Commands.ZoomOut" />
        <RoutedUICommand x:Key="Commands.ZoomIn" />
        <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
        <RoutedUICommand x:Key="Commands.Fill" />
        <RoutedUICommand x:Key="Commands.OneHundredPercent" />

        <!-- 
        This converts from a scale value to a percentage value.
        It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
        -->
        <local:ScaleToPercentConverter 
            x:Key="scaleToPercentConverter" 
            />

        <!-- 
        Converts a color value to a brush.
        -->
        <local:ColorToBrushConverter 
            x:Key="colorToBrushConverter"
            />

       

        <!-- 
        Override the style of the ListBox to remove the ScrollViewer.
        All we want is ListBox logic but based on a Canvas.
        -->
        <Style x:Key="noScrollViewerListBoxStyle" TargetType="ListBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Canvas 
                            Background="{TemplateBinding Background}"
                            IsItemsHost="True" 
                            />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 
        Override the style of each ListBoxItem to bind Canvas.Left, Canvas.Top and IsSelected.
        -->
        <Style 
            x:Key="listBoxItemStyle" 
            TargetType="ListBoxItem"
            >
            <Setter 
                Property="Canvas.Left" 
                Value="{Binding X}" 
                />
            <Setter 
                Property="Canvas.Top" 
                Value="{Binding Y}" 
                />
            <Setter 
                Property="IsSelected" 
                Value="{Binding IsSelected}" 
                />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <!--
                        This border is used for indicating selection.
                        Normally it is transparent, when the item is selected the border is set to blue.
                        -->
                        <Border 
                            Name="Border"
                            BorderThickness="1"
                            Padding="2"
                            >
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--
                            When the ListBoxItem is selected draw a simple blue border around it.
                            -->
                            <Trigger Property="IsSelected" Value="true">
                                <Setter 
                                    TargetName="Border" 
                                    Property="BorderBrush"
                                    Value="Blue"
                                    />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    
    <Window.InputBindings>
        
        <!--
        Bind keys to commands.
        -->
        <KeyBinding
			Key="Minus"
			Command="{StaticResource Commands.ZoomOut}"
			/>
        <KeyBinding
			Key="Plus"
			Command="{StaticResource Commands.ZoomIn}"
			/>
        <KeyBinding
			Key="Backspace"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>
        
    </Window.InputBindings>
    
    <Window.CommandBindings>

        <!--
        Bind commands to event handlers.
        -->
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />

    </Window.CommandBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        
        <GroupBox Header="Overview">
            <local:OverviewWindow x:Name="overViewWindow" Grid.Row="0" Height="150" HorizontalAlignment="Left" />
        </GroupBox>

        <Grid Grid.Row="0" Grid.Column="1">
            <GroupBox Header="Render Settings">
            <Border BorderThickness="1" BorderBrush="Black"  Margin="5" Padding="5" CornerRadius="5">
            <StackPanel Orientation="Vertical">
                <TextBlock><Run Text="Current RenderTier for this Machine : "/><Run Text="{Binding RenderTier, ElementName=mainWindow}" /></TextBlock>
                <CheckBox Margin="0,5,0,0" IsChecked="{Binding IsImageCached, ElementName=mainWindow}">Use Image Caching</CheckBox>
                <CheckBox Margin="0,5,0,0" IsChecked="{Binding UseSoftwareRenderOnly, ElementName=mainWindow}">Use Software Rendering Only</CheckBox>
                <CheckBox Margin="0,5,0,0" IsChecked="{Binding UseImageEffects, ElementName=mainWindow}">Use Image Effects (In Combination wit Cache causes Errors)</CheckBox>
                 <TextBlock  Margin="0,5,0,0" TextWrapping="Wrap" Text="Using Image Cache and Effects causes Render Error, depending on the power of your machine, errors come sooner or later. I was not able to locate the Source of the Errors but i guess we are having some Memory Leaks here" />
                </StackPanel>
            </Border>
            </GroupBox>
        </Grid>

        <!-- 
        Grid placed below the zoom and pan control that contains the zoom slider, zoom label and
        some button.
        -->
        <Grid
            Margin="5,5,5,5"
            Grid.Row="2" Grid.ColumnSpan="2"
            >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <!-- empty space -->
                <ColumnDefinition Width="40" />
                <!-- the fill button -->
                <ColumnDefinition Width="5" />
                <!-- spacer -->
                <ColumnDefinition Width="40" />
                <!-- the 100% button -->
                <ColumnDefinition Width="5" />
                <!-- spacer -->
                <ColumnDefinition Width="25" />
                <!-- the zoom percentage label -->
                <ColumnDefinition Width="15" />
                <!-- the % symbol -->
                <ColumnDefinition Width="5" />
                <!-- spacer -->
                <ColumnDefinition Width="20" />
                <!-- the zoom out button -->
                <ColumnDefinition Width="5" />
                <!-- spacer -->
                <ColumnDefinition Width="120" />
                <!-- the zoom slider -->
                <ColumnDefinition Width="5" />
                <!-- spacer -->
                <ColumnDefinition Width="20" />
                <!-- the zoom in button -->
                <ColumnDefinition Width="10" />
                <!-- spacer -->
                <ColumnDefinition Width="Auto" />
                <!-- resize grip -->
                <!-- spacer -->
            </Grid.ColumnDefinitions>

            <TextBlock>please Reply to info@devskill.de</TextBlock>
            
            <!-- 
            The fill button.  Causes the content to be scaled so that it fits in the viewport.
            -->
            <Button
                Grid.Column="1"
                Command="{StaticResource Commands.Fill}"
                >
                Fill
            </Button>
            <!-- 
            The 100% button.  Causes the content to be scaled to 100 percent.
            -->
            <Button
                Grid.Column="3"
                Command="{StaticResource Commands.OneHundredPercent}"
                >
                100%
            </Button>

            <!--
            This is the label that shows what the current zoom level
            is while zooming in and out.
            -->
            <TextBlock
                Grid.Column="5"
                VerticalAlignment="Center"
                HorizontalAlignment="Right"
                Text="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"
                />

            <TextBlock
                Grid.Column="6"
                VerticalAlignment="Center"
                Text="%"
                />

            <!-- Button to zoom out. -->
            <Button
                Grid.Column="8"
                Command="{StaticResource Commands.ZoomOut}"
                >
                -
            </Button>

            <!-- Slider to change the current zoom level. -->
            <Slider
                Grid.Column="10"
                Minimum="10" 
                LargeChange="100" 
                TickFrequency="100" 
                Maximum="1000" 
                SmallChange="10" 
                TickPlacement="TopLeft"
                Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"
                />

            <!--
            Button to zoom in.
            -->
            <Button
                Grid.Column="12"
                Command="{StaticResource Commands.ZoomIn}"
                >
                +
            </Button>


        </Grid>

            
            <!--
            This is the control that handles zooming and panning.
            -->
            <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                Grid.Row="1"
                Grid.ColumnSpan="2"
                ContentScale="{Binding Source={x:Static local:DataModel.Instance}, Path=ContentScale, Mode=TwoWay}"
                ContentOffsetX="{Binding Source={x:Static local:DataModel.Instance}, Path=ContentOffsetX, Mode=TwoWay}"
                ContentOffsetY="{Binding Source={x:Static local:DataModel.Instance}, Path=ContentOffsetY, Mode=TwoWay}"
                ContentViewportWidth="{Binding Source={x:Static local:DataModel.Instance}, Path=ContentViewportWidth, Mode=OneWayToSource}"
                ContentViewportHeight="{Binding Source={x:Static local:DataModel.Instance}, Path=ContentViewportHeight, Mode=OneWayToSource}"
                Background="LightGray"
                
                MinContentScale="0.1"
                MaxContentScale="10"
                
                Cursor="Hand"
                
	            MouseDown="zoomAndPanControl_MouseDown"
	            MouseUp="zoomAndPanControl_MouseUp"
	            MouseMove="zoomAndPanControl_MouseMove"
	            MouseWheel="zoomAndPanControl_MouseWheel"
                MouseDoubleClick="zoomAndPanControl_MouseDoubleClick"
                >
                
                <!-- 
	            This is the content that is displayed.
	            -->
                <Grid>

                    <Image x:Name="content" Source="world3.jpg" Grid.ColumnSpan="2"  />

                    <!--
                    This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                    uses to specify an area to zoom in on.
                    -->
                    <Canvas
                        x:Name="dragZoomCanvas"
                        Visibility="Collapsed" Grid.ColumnSpan="2">
                        <Border 
                            x:Name="dragZoomBorder"
                            BorderBrush="Black"
                            BorderThickness="1"
                            Background="Silver"
                            CornerRadius="1"
                            Opacity="0"
                            />
                    </Canvas>
                </Grid>
            </ZoomAndPan:ZoomAndPanControl>

    </Grid>
</Window>

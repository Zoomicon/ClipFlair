<!--
Project: ClipFlair (http://ClipFlair.codeplex.com)
Filename: BaseWindow.xaml
Version: 20140608
-->

<float:FloatingWindow x:Class="ClipFlair.Windows.BaseWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sdk="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"
    xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"
    xmlns:flip="clr-namespace:FlipPanel;assembly=FlipPanel"
    xmlns:float="clr-namespace:SilverFlow.Controls;assembly=SilverFlow.Controls"                      
    xmlns:widgets="clr-namespace:ClipFlair.UI.Widgets;assembly=ClipFlair.UI.Widgets.Silverlight"
    xmlns:lbl="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"
    xmlns:color="clr-namespace:ColorPickerLib;assembly=ColorPicker"
    xmlns:local="clr-namespace:ClipFlair.Windows;assembly=ClipFlair.Windows.Base"
    mc:Ignorable="d"
    d:DesignHeight="400" d:DesignWidth="400"
                      
    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
    HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
    
    Tag="{Binding ID, Mode=TwoWay}"
    Title="{Binding Title, Mode=TwoWay}"
    IconText="{Binding Title, Mode=TwoWay}"
                      
    Position="{Binding Position, Mode=TwoWay}"
    Width="{Binding Width, Mode=TwoWay}"
    Height="{Binding Height, Mode=TwoWay}"
    Scale="{Binding Zoom, Mode=TwoWay}"
    Canvas.ZIndex="{Binding ZIndex, Mode=TwoWay}"
                      
    Opacity="{Binding Opacity, Mode=TwoWay}"
                   
    CornerRadius="{Binding CornerRadius, Mode=TwoWay}"
    BorderThickness="{Binding BorderThickness, Mode=TwoWay}"                      
    
    AllowDrop="True"
                      
    MoveEnabled="{Binding Moveable, Mode=TwoWay}"
    ResizeEnabled="{Binding Resizable, Mode=TwoWay}"        
    ScaleEnabled="{Binding Zoomable, Mode=TwoWay}"
                      
    MoveMaximizedEnabled="True"
    ResizeMaximizedEnabled="True"
                      
    ShowCloseButton="True"
    ShowMinimizeButton="True"
    ShowMaximizeButton="True"                  
    ShowScreenshotButton="False"
    ShowHelpButton="False"
    >

  <VisualStateManager.VisualStateGroups>
    <VisualStateGroup x:Name="DragStates">
      <VisualStateGroup.Transitions>
        <VisualTransition GeneratedDuration="0:0:0.3">
          <VisualTransition.GeneratedEasingFunction>
            <CircleEase EasingMode="EaseIn"/>
          </VisualTransition.GeneratedEasingFunction>
        </VisualTransition>
      </VisualStateGroup.Transitions>
      <VisualState x:Name="Normal"/>
      <VisualState x:Name="DragOver">
        <Storyboard>
          <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)" Storyboard.TargetName="ContentBorder"> <!-- doesn't seem to do something -->
            <EasingColorKeyFrame KeyTime="0" Value="#FFFFF7D1"/>
          </ColorAnimationUsingKeyFrames>
        </Storyboard>
      </VisualState>
    </VisualStateGroup>
  </VisualStateManager.VisualStateGroups>
  
  <!-- hiding screenshot button due to Silverlight security issue: not rendering cross-domain content to WriteableBitmap, enable only at components that don't load Internet content -->
  <!-- not using RTL here since it would also reverse UI like scrollpanes etc. -->
  
  <float:FloatingWindow.BorderBrush>
    <SolidColorBrush Color="{Binding BorderColor}" />
  </float:FloatingWindow.BorderBrush>
  
  <float:FloatingWindow.TitleForeground>
    <SolidColorBrush Color="{Binding TitleForegroundColor}" />    
  </float:FloatingWindow.TitleForeground>
  
  <float:FloatingWindow.TitleBackground>
    <SolidColorBrush Color="{Binding TitleBackgroundColor}" />
  </float:FloatingWindow.TitleBackground>
  
  <float:FloatingWindow.Background>
    <SolidColorBrush Color="{Binding BackgroundColor}" />
  </float:FloatingWindow.Background>
  
  <float:FloatingWindow.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SilverFlow.Controls;component/Themes/generic.xaml"/>
        <ResourceDictionary Source="/FlipPanel;component/Themes/DropDownTheme.xaml" />
        <ResourceDictionary Source="/ClipFlair.Windows.Base;component/Themes/Generic.xaml" />
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </float:FloatingWindow.Resources>

  <float:FloatingWindow.Style>
    <Style TargetType="float:FloatingWindow" BasedOn="{StaticResource FloatingWindowStyle}">
      <Setter Property="TitleStyle" Value="{StaticResource ClipFlairTitleStyle}" />
      <Setter Property="ScreenshotButtonStyle"  Value="{StaticResource ClipFlairScreenshotButtonStyle}" />
      <Setter Property="HelpButtonStyle"  Value="{StaticResource ClipFlairHelpButtonStyle}" />
      <Setter Property="OptionsButtonStyle" Value="{StaticResource ClipFlairOptionsButtonStyle}" />
      <Setter Property="MinimizeButtonStyle" Value="{StaticResource ClipFlairMinimizeButtonStyle}" />
      <Setter Property="MaximizeButtonStyle" Value="{StaticResource ClipFlairMaximizeButtonStyle}" />
      <Setter Property="RestoreButtonStyle" Value="{StaticResource ClipFlairRestoreButtonStyle}" />
      <Setter Property="CloseButtonStyle" Value="{StaticResource ClipFlairCloseButtonStyle}" />
    </Style>

  </float:FloatingWindow.Style>
  
  <toolkit:BusyIndicator
    BusyContent="Loading..."
    IsBusy="{Binding Busy}"
    HorizontalAlignment="Stretch"
    VerticalAlignment="Stretch"
    HorizontalContentAlignment="Stretch"
    VerticalContentAlignment="Stretch" 
    >

    <flip:FlipPanel
      Name="FlipPanel" 
      HorizontalAlignment="Stretch" 
      VerticalAlignment="Stretch" 
      HorizontalContentAlignment="Stretch"
      VerticalContentAlignment="Stretch"
      Style="{StaticResource FlipPanel_DropDownStyle}"
      >

      <!-- descendents should define children of BaseWindow.FrontContent (implied content property for BaseWindow) in the XAML -->

      <flip:FlipPanel.BackContent>
        <!-- descendents should define children of BaseWindow.PropertyItems in the XAML (defining children of FlipPanel.BackContent will make them show below the scroller and accordion) -->

        <ScrollViewer Background="#E3DAC9" 
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="29" />
              <RowDefinition Height="40"/>
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <widgets:OptionsLoadSaveControl HorizontalAlignment="Stretch"
              Grid.Row="0"
              Name="ctrlOptionsLoadSave"
              LoadURLTooltip="Load component from URL"
              LoadTooltip="Load component from file"
              SaveTooltip="Save component to file"
              Background="{StaticResource ClipFlairActivityToolbarBackground}"
              />

            <!--
            <StackPanel Orientation="Horizontal">
              <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Options Source (URL):" Target="{Binding ElementName=edOptionsURL}" />
              <TextBox Name="edOptionsURL" Text="{Binding OptionsSource, Mode=TwoWay}" HorizontalAlignment="Stretch" />
            </StackPanel>
            -->

            <StackPanel
              Grid.Row="1"
              Name="propTitle"
              Orientation="Vertical"
              >
              <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Title:" Target="{Binding ElementName=edTitle}" />
              <TextBox Name="edTitle" Text="{Binding Title, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
            </StackPanel>

            <toolkit:Accordion
              Grid.Row="2"
              SelectionMode="ZeroOrOne"
              SelectionSequence="Simultaneous"
              ExpandDirection="Down"
              HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch"
              >

              <toolkit:AccordionItem
                Header="Window Options"
                IsSelected="False"
                Background="Transparent"
                HorizontalAlignment="Stretch"
                HorizontalContentAlignment="Stretch"
                >
                <toolkit:AccordionItem.Content>

                  <StackPanel
                    Name="PropertiesPanelBase"
                    Orientation="Vertical"
                    Margin="10,10,10,10"
                    HorizontalAlignment="Stretch">

                    <StackPanel.Resources>
                      <Style TargetType="StackPanel" BasedOn="{StaticResource PropertyStackPanelStyle}" />
                      <Style TargetType="Grid" BasedOn="{StaticResource PropertyGridStyle}" />
                    </StackPanel.Resources>

                    <!--
                    <StackPanel Orientation="Vertical" Name="propID">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="ID:" Target="{Binding ElementName=edID}" />
                      <TextBox Name="edID" Text="{Binding ID, Mode=TwoWay}" />
                    </StackPanel>
                    -->
                    
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                      </Grid.ColumnDefinitions>

                      <StackPanel Grid.Column="0" Orientation="Vertical" Name="propX" Margin="0,0,5,0">
                        <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="X:" Target="{Binding ElementName=edX}" />
                        <TextBox Name="edX" Text="{Binding X, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                      </StackPanel>

                      <StackPanel Grid.Column="1" Orientation="Vertical" Name="propY" Margin="5,0,0,0">
                        <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Y:" Target="{Binding ElementName=edY}" />
                        <TextBox Name="edY" Text="{Binding Y, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                      </StackPanel>

                    </Grid>
                    
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                      </Grid.ColumnDefinitions>
                      
                      <StackPanel Grid.Column="0" Orientation="Vertical" Name="propWidth" Margin="0,0,5,0">
                        <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Width:" Target="{Binding ElementName=edWidth}" />
                        <TextBox Name="edWidth" Text="{Binding Width, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                      </StackPanel>

                      <StackPanel Grid.Column="1" Orientation="Vertical" Name="propHeight" Margin="5,0,0,0">
                        <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Height:" Target="{Binding ElementName=edHeight}" />
                        <TextBox Name="edHeight" Text="{Binding Height, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                      </StackPanel>

                    </Grid>

                    <StackPanel Orientation="Vertical" Name="propZoom">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Zoom:" Target="{Binding ElementName=edZoom}" />
                      <TextBox Name="edZoom" Text="{Binding Zoom, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                      <!-- can't use a slider here, since the grabbed slider thumb would move away from the mouse while zooming in/out -->
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propZIndex">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Z-order layer index:" Target="{Binding ElementName=edZIndex}" />
                      <TextBox Name="edZIndex" Text="{Binding ZIndex, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propOpacity">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Opacity:" Target="{Binding ElementName=sldOpacity}" />
                      <!-- <TextBox Name="edOpacity" Text="{Binding Opacity, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" /> -->
                      <Slider Name="sldOpacity" Value="{Binding Opacity, Mode=TwoWay}" Minimum="0.1" Maximum="1" SmallChange="0.05" LargeChange="0.1" Orientation="Horizontal" />
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propTitleForegroundColor">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Title Foreground Color:" Target="{Binding ElementName=edTitleForegroundColor}" />
                      <color:ColorPicker Color="{Binding TitleForegroundColor, Mode=TwoWay}" />
                      <!-- <TextBox Name="edTitleForegroundColor" Text="{Binding TitleForegroundColor, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" /> -->
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propTitleBackgroundColor">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Title Background Color:" Target="{Binding ElementName=edTitleBackgroundColor}" />
                      <color:ColorPicker Color="{Binding TitleBackgroundColor, Mode=TwoWay}" />
                      <!-- <TextBox Name="edTitleBackgroundColor" Text="{Binding TitleBackgroundColor, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" /> -->
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propBackgroundColor">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Background Color:" Target="{Binding ElementName=edBackgroundColor}" />
                      <color:ColorPicker Color="{Binding BackgroundColor, Mode=TwoWay}" />
                      <!-- <TextBox Name="edBackgroundColor" Text="{Binding BackgroundColor, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" /> -->
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propBorderColor">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Border Color:" Target="{Binding ElementName=edBorderColor}" />
                      <color:ColorPicker Color="{Binding BorderColor, Mode=TwoWay}" />
                      <!-- <TextBox Name="edBorderColor" Text="{Binding BorderColor, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" /> -->
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propBorderThickness">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Border Thickness:" Target="{Binding ElementName=edBorderThickness}" />
                      <TextBox Name="edBorderThickness" Text="{Binding BorderThickness, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Name="propCornerRadius">
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Corner Radius:" Target="{Binding ElementName=edCornerRadius}" />
                      <TextBox Name="edCornerRadius" Text="{Binding CornerRadius, Mode=TwoWay, ValidatesOnExceptions=True, NotifyOnValidationError=True}" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Name="propMoveable">
                      <CheckBox Name="cbMoveable" IsChecked="{Binding Moveable, Mode=TwoWay}" />
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Moveable" Target="{Binding ElementName=cbMoveable}"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Name="propResizable">
                      <CheckBox Name="cbResizable" IsChecked="{Binding Resizable, Mode=TwoWay}" />
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Resizable" Target="{Binding ElementName=cbResizable}"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Name="propZoomable">
                      <CheckBox Name="cbZoomable" IsChecked="{Binding Zoomable, Mode=TwoWay}" />
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Zoomable" Target="{Binding ElementName=cbZoomable}"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Name="propWarnOnClosing">
                      <CheckBox Name="cbWarnOnClosing" IsChecked="{Binding WarnOnClosing, Mode=TwoWay}" />
                      <lbl:Label Style="{StaticResource PropertyLabelStyle}" Content="Warn on closing" Target="{Binding ElementName=cbWarnOnClosing}"/>
                    </StackPanel>

                  </StackPanel>

                </toolkit:AccordionItem.Content>
              </toolkit:AccordionItem>

              <toolkit:AccordionItem Header="Content Options" IsSelected="True" Background="Transparent" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                <toolkit:AccordionItem.Content>

                  <StackPanel Name="PropertiesPanel" Orientation="Vertical" Margin="10,10,10,10" HorizontalAlignment="Stretch">

                    <StackPanel.Resources>
                      <Style TargetType="StackPanel" BasedOn="{StaticResource PropertyStackPanelStyle}" />
                    </StackPanel.Resources>

                    <!-- descendents should add items (better be a list of StackPanels) under a clipflair:BaseWindow.PropertyItems node in XAML -->

                  </StackPanel>

                </toolkit:AccordionItem.Content>
              </toolkit:AccordionItem>

            </toolkit:Accordion>

          </Grid>
        </ScrollViewer>

      </flip:FlipPanel.BackContent>

    </flip:FlipPanel>
  </toolkit:BusyIndicator>

</float:FloatingWindow>
